1区分文件和目录
  文件是目录最后一级中的数据,能够直接使用,目录相当于文件夹

2对于输入流来说,如果文件不存在,那么就会报错
 对于输出流来说,如果文件不存在,那么输出流会创建同名的文件,然后write数据
 但是要注意如果该路径下的目录,也就是文件加不存在,那么会报错
 比如  new FileOutputStream(new File("password\美女.jpg")); 
 这是相对路径形式,如果当前路径下没有password目录,那么就会报错,输出流能创建文件但是不能创建目录
 
 
 File类,file对象是文件和目录路径名的抽象表示形式, 也就是说不管用什么样的路径都能成一个file对象,不存在的路径也可以
 
 但是在实际使用这个file对象时,如果file对象表示的抽象路径不存在时,会出现一些问题
 
  File对象重要API   exists()  这个方法可以判断file表示的抽象路径的目录或者文件是否存在  如果存在返回ture 不存在返回false
                    createNewFile() 当file表示的抽象路径的文件不存在时,创建一个新文件,要注意的是,这个方法只能创建文件,
                                    如果这个文件的上级目录不存在时,就会报错,无法创建文件,需要先创建父级目录
                                    比如路径"one\two\美女.jpg",由于当前路径下one\two\不存在,所以无法创建美女.jpg文件
                    mkdir()创建file抽象路径的目录,但是该方法只能创建最后一级目录,注意该file对象表示路径只能是目录而不是文件
                    mkdirs()创建file抽象路径的目录以及所有必须的父目录
                    getParentFile()返回file抽象路径所表示上一级目录   比如 "c:\\one\two\美女.jpg"的上一级目录就是"c:\\one\two"
              
              
                   通常对于某个路径下的文件来说,我们要写入数据,首先File对象判断该文件的父目录是否存在,如果不存在则调用mkdirs()
                   然后直接使用输出流自动创建文件,当然也可以使用createNewFile()创建文件
  
  
  路径问题:在javaSE中使用File相对路径,起始默认路径是java project文件下
            在java开发中字符串路径中,反斜杠\是特殊字符,不能够直接写在字符串中的,要使用反斜杠需要使用转移字符\\  和\n \t \b \f \' \"类似 \\在字符串中代表反斜杠
            而路径符一般来说就是斜杠/  当然路径符号也可以使用反斜杠\,但是在java里面反斜杠必须使用\\才能正确显示 比如 C:/xxx/xxx或者"C:\\xx\\xx\\" 在java中要这样写才能正确读取读经
            
           在javaee中不要使用File去获得某个文件的抽象路径,file不能正确读取相对路径,但是可以使用file去读取绝对路径
              三种方式: 1:通过class类的classloader 的getresourceassream("文件的相对路径")可以得到文件的输入流
                           参数是文件的相对路径,而这个方法的相对路径起始默认位置参照的是web根目录下的web-inf/classes  因此如果想要得到web项目中的某个文件
                           则路径要加上../../返回根目录然后+路径  比如"../../图片/xx.jpg"  这样的方式 
                           
                         2通过servletContext对象的方法 这个类通过request.getsession.getsevletcontext()  或者通过this.getservletconfig().get...得到
                             getrealpath()  这个方法可以得到文件的绝对路径   参数是文件的相对路径
                             这个方法默认起始位置参照的是web根目录  
                             如果不加参数得到的就是web项目的绝对路径     有了绝对路径就可以使用File类和流类去进行相关操作
                             如果加了参数 比如 getrealpath("美女.jpg")  会得到web项目下这个图片的真实路径,前提是存在该文件
                            
                             getresourceasstream()  和上面一样,只不过得到的是文件的输入流.文件必须存在
                             
                  如果是读取web工程大的资源三个方法都可以,如果是想要往web工程中添加文件,则先使用getrealpath()得到web项目绝对路径,然后使用File类操作
                  可以在web项目绝对路径上拼接一个目录 然后mkdirs()   然后再拼接文件名,创建或者不用创建  然后开启输出流 输出文件
                             
                      
3HttpClient
   第三方开发的Jar包,这个类可以模拟浏览器客户端,然后可以模拟get和post请求,并且得到响应数据
   
   
   
4Maven的使用 eclipse
  新建项目 other 选择maven project  
  一直下一步, 
  group ID  是这个maven模块所属的组id  一般就是一个包名  比如 com.study
  artifact ID 相当于这个模块或者项目的名字
  version:该元素定义jar包的版本,类似于身份证号,啊
   
   maven最重要的好处:
   1依赖管理,里面有一个很重要的文件POM.xml  pom是项目对象模型
   maven将项目当作对象来管理
   在maven project中只要在pom中引入了项目所需要的依赖 就不需要jar包了
   我们只需要去搜索相应jar包的依赖 然后添加进pom的的dependence标签中 
 
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-beans</artifactId>
        <version>5.2.7.RELEASE</version>
    </dependency>
    可以看出我们在创建mave项目的时候也需要输入groupId  artifactId version  说明了到时候我们的模块整合其他人的模块只需要将我们的模块上传到私服
    然后其他人只需要在pom.xml中输入我们相应的坐标就可以找到我们的项目
    
    同理java所需要的各种依赖在maven仓库中也有想用的组名 项目名以及版本号  我们只需要给出左边就能够找到依赖,由于这些依赖建立了索引,所以搜索极快
    和导入jar一摸一样 前提是需要联网
   MavenRepository 在这个网址搜索依赖
  
  2一件构建
    可以将maven的项目一键编译,测试,运行,打包,部署到tomcat目录上去,然后开放访问
    在cmd命令行下  进入maven项目所在文件 mvn tomcat:run
   
   
   
  5maven的安装   maven是免安装的
   下载然后解压缩到一个没有空格和中文的路径下
   
   配置环境变量:由于maven里面有提供了一些命令脚本比如mvn一键构建等
   
   关于java的环境配置:  设置JAVA_HOME=jdk文件夹的路径  在path系统变量里面添加值  %AVA_HOME%\bin  %AVA_HOME%\jre\bin 
    或者不需要java_home变量  直接在path环境变量里面直接添加 jdk\bin  或者jdk\jre\bin 的全路径即可   因为java_home就是用来简写path里面的路径的
   java不是免安装的,需要去安装之后然后配置环境变量,而eclipse是免安装的.  
   
   path环境变量是什么意思:比如我们在cmd窗口中敲命令 起始是运行某个程序,但是有个必要条件就行,我们必须要在这个程序所在的文件夹下才能直接运行这个程序
                          那么怎么才能不进入这个程序所在文件夹而运行程序呢? 这就是path环境变量了,只要把路径添加进path环境变量,那么我们运行程序比如java
                          回优先从path环境变量的所有路径中一个一个地去找这个程序,所以配置java_home变量就是在path用%%来引用,也可以不设置,直接在path里面添加全路径即可
                   
   
   
   Maven的环境变量配置:
   添加环境变量:MAVEN_HOME=macen的解压缩地址
   将环境变量添加进系统环境变量 path中去 %MAVEN_HOME%\bin
   
  
  5Maven的仓库与配置
    本地仓库:本地存放jar包的目录
    远程仓库(私服):私人搭建的服务器  一般在企业内部局域网中使用
    中央仓库:maven内置了一个远程仓库的地址,这就是中央仓库,这是由apach维护的
            访问呢的url可以从
          
           1. http://mvnrepository.com/ （本人推荐仓库）
           2. http://repo1.maven.org/maven2
      下载jar包或者mvn依赖可以去这两个网址
   
   
   
   maven怎么找jar包的, 先从本地仓库找-然后如果有私服的话会去私服找-私服中没有就会从中央仓库下载到私服 然后maven会将jar包从私服下载到本地仓库
   如果有网才能从中央仓库下载,但是不论怎么样最后maven都会把jar下载到本地仓库
   
   比如我们在pom中加入项目依赖,然后会先去本地仓库找这个jar包,如果不存在xxxx和上面一样
   不是说maven项目不需要jar包,只是我们在使用maven项目的时候不需要手动导入jar包,只需要在pom配置依赖,然后maven会去找依赖
   当我们需要某个依赖的时候,需要在pom.xml中引入该依赖,然后maven才会去仓库查找对应的jar包,然后引入项目
   
   
   6Maven项目的标准目录结构规范
   里面src/main/java  中放的是项目的源码  src/main/resource 放的是项目的 配置文件 
      src/main/webapp放的是页面素材   webapp里面有  WEB-INF文件夹 /web.xml文件以及lib文件夹   可以把这个webapp规范看成tomcat工程下webcontent目录
      
     src/test/xxx  放的是测试相关东西 
      
   在maven中src和pom.xml是同级的
   
   7Maven 的基本命令
   mvn命令        参数有以下 在一个java项目或者Maven_web项目根目录下执行以下命令  不需要指定文件名-自动监测  但是需要在项目根目录下执行该命令
                  
   1mvn clean     清楚target目录及其目录中所有文件
   2mvn compile   将src/main/java中的源代码编译成class文件
   3mvn test      运行测试用例  运行src/test/java下的java文件
   4mvn package   打包命令  会将java项目打包成jar包    一般会打包在target目录中
   5mvn install   将当前maven项目部署放到本地仓库中,这个命令做了上面所有操作
   
   指令的生命周期 当后面的指令执行后前面的指令也会执行
   
   
   8eclipse配置maven(建议使用mars2)
   
  1配置maven插件,高版本自带 
   
   Ⅰ添加本地maven
   点击window-preference-maven-installtion  点击add添加电脑上maven的解压缩包
   
   Ⅱ配置本地仓库  
   首先修改setting文件
      在maven安装路径下/cong/setting.xml中配置标签
      <localRepository>本地仓库路径</localRepository>
    这个仓库其实里面装的就是我们自己下载的一大堆jar包
   点击window-preference-maven-usersetting 
   修改usersetting选项    将maven路径下conf文件下的setting.xml添加进去即可,因为maven的本地仓库就是在这个xml中配置的,只需要加载这个文件就行了
   
   Ⅲ定时的去重构索引 加快jar包的查询速度
      点击window-showview-other  搜索mavenrepository  在下面的一个栏目里 对localrepository中的所有jar点击右键重构索引
   
  
  9使用maven创建工程
   在eclipse中选择创建其他项目,搜索maven项目,然后选择打包类型的时候有jar  和 war 和pom
   如果我们这个项目是一个简单的java工程 选择 jar  如果是一个web工程就是war
   pom是指 分模块开发的时候选的类型
   
   会出现几个问题:
   **********************************************************************************************************
   当我们不用eclipse自带的maven插件,而是自己的,当配置好maven本地仓库后,由于仓库里面没有东西,所以在创建maven时会出错
   这是需要在conf文件的setting.xml中的镜像标签下 
   
   添加<mirror>
        <id>nexus-aliyun</id>
        <mirrorOf>*</mirrorOf>
        <name>Nexus aliyun</name>
        <url>http://maven.aliyun.com/nexus/content/groups/public</url>
      </mirror>
   由于高版本的MAVEN中央库是repo1.maven.org，这个库联通性不是很好，所以在监测本地没有相关依赖时就会去中央仓库下载,但是网络不好的话一时间又无法下载完成
   这时候就会报错,因此加入这个镜像的目的就是提供另外一个镜像,提示maven可以从这个路径下去下载相关依赖
   
   这个镜像的下载速很快***
   *******************************************************************************************************************
   
   当解决以上问题后,新建的maven项目还是要报错,原因是webapp文件中没有WEB-INF文件以及web.xml文件 
   方法:
   1手动创建这个weinf文件夹以及xml
   2点击项目右键-javaee Tools-generate deployment descriptor stub
      这个可以帮我们自动生成标准的web目录 (建议使用这个)
   *********************************************************************** 
   ***调整maven工程中的JDK版本:maven自带的是1.5  我们要改成1.8的  具体步骤
   第一种方式:
   Ⅰ右键选中maven-add plugin -搜索compile 选中确定添加插件   这里加的是编译器插件(其实就是帮我们快速在pom里面生成加载插件的标签)
   Ⅱ在pom.xml中此时多了一段
   <plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-compiler-plugin</artifactId>
  			<version>3.1</version>
  	</plugin>
   Ⅲ在plugin中里面加入以标签即可
   <configuration>
  			<source>1.8</source>
  			<target>1.8</target>
  			<encoding>utf-8</encoding>
	</configuration>
  
  第二种方式:
  修改配置文件 /mavenconf/setting.xml
  在profiles标签中加入以下标签
  <profile>    
    <id>jdk-1.8</id>    
    <activation>    
          <activeByDefault>true</activeByDefault>    
          <jdk>1.8</jdk>    
    </activation>    
    <properties>    
      <maven.compiler.source>1.8</maven.compiler.source>    
      <maven.compiler.target>1.8</maven.compiler.target>    
      <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>    
    </properties>    
  </profile>
  **************************************************************************** 
   
   
   
   10在pom.xml中添加依赖的标签dependences标签是根标签下的子标签
       Ⅰ手动添加<dependences></>标签 然后去MVNrepository上去搜索坐标
       Ⅱ快速添加依赖 项目右键-add  dependence-然后搜索(注意 搜索只能搜索本地仓库,如果本地仓库没有还是需要去手动配置依赖)
   
     在maven工程中和动态web工程不一样,动态二多web工程中会自动添加tomcat服务器中的jar库
     因此我们在动态web工程中创建servlet不会报错,因为有相应的jar包
     但是在maven中没有tomcat的库,需要我们手动去引入,需要什么jar包就去引入什么依赖
     
     比如创建servlet需要 servlet-api依赖
     
     
   
   11如何运行maven项目到tomcat上呢,记住maven项目是不带tomcat的
  Ⅰ第一种方法 我们需要将这个项目发布到tomcat服务器上,然后启动服务器器,前提是已经在eclipse上配置了tomcat服务器,我们所谓的运行就是运行到服务器上,也就是丢上去,然后启动服务器
  
  Ⅱ我们不是没有么? 那就添加一个tomcat插件  右键-maven-add plugin  如果搜索不到就手动在pom标签中 (这种方式并不是一个实际的tomcat,模拟了tomcat的环境来运行maven项目)
   添加<bulid>  <plugins>   网上去搜tomcatplugin的坐标    </plugins> </build>
     <plugin>
    <groupId>org.apache.tomcat.maven</groupId>
    <artifactId>tomcat7-maven-plugin</artifactId>
    <version>2.2</version>
	<configuration>
		<path>/项目路径</path>   我们这个maven项目的项目路径名字
		<uriencodie>utf-8
    <port>8080如果为了和本地的tomcat区分可以使用其他端口号</port>  
	</configuration>
  </plugin>
   
   当我们加了插件之后就可以直接使用cmd在文件夹中 使用mvn tomcat7:run  这样就可以把文件部署到tomcat上  然后可以使用网访问
   或者在eclipse中右键 -maven build-输入tomcat7:run   记住这样的话我们的项目是运行在maven的tomcat上的  
   

   
   12依赖的作用范围
      <scope></scope> 在依赖标签中
      
      这个标签的作用是修改依赖的作用范围
      
    
     值:  compile：scope的默认值是compile，表示被依赖项目需要参与当前项目的编译，还有后续的测试，运行周期(就是放在tomcat上)也参与其中，是一个比较强的依赖。打包的时候该依赖通常需要包含进去。
          test：依赖项目仅参与测试相关工作，包括测试代码的编译执行，不会被打包。
          runtime：表示被依赖项目不用参与项目的编译，只参与后期的测试和运行周期。与compile相比，跳过了编译而已。例如JDBC驱动，适用运行和测试阶段。
          provided：打包的时候可以不用包进去，外部的服务或组件会提供。事实上该依赖理论上可以参与编译，测试周期。相当于compile，但是打包阶段做了exclude(打包或者放到服务器上时不包含该依赖)操作。例如：开发web的时候，需要用到servlet-api，在pom.xml中添加依赖：
           <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>servlet-api</artifactId>
          <version>3.0-alpha-1</version>
         <scope>provided</scope>
          </dependency>
        由于tomcat中也有servlet-api包，会发生冲突所以应添加：<scope>provided</scope>
        system：从参与度来说，和provided相同，不过被依赖项不会从maven仓库下载，而是从本地文件系统拿。需要添加systemPath的属性来定义路径

   13maven整合strus
   记住此时strus的xml不是放在main/java下了  而是在src/resource中
   
   
   
   
   13工程拆分的思想
   将一个工程分模块拆分开比如dao service web拆开开发,然后提高效率
   
   如何将这些项目聚合起来呢?
            项目父工程   
      Dao子工程   service子工程  web子工程      
            
   maven中继承的思想:
      在java中继承是为了消除重复,在父工程中引入所有坐标,那么让子工程继承父工程,那么在子工程中不需要依赖了
      
   
   父工程:其实就是maven project  子工程:maven moudule
   
   同时:子工程之间也存在依赖的关系,比如service需要用到dao模块  web层用到service模块
   
   建立父工程:选择project 然后打包方式选择pom,在父工程中不写任何代码
   
   建立子工程:点击父工程,右键建立maven moudule,
   dao层打包方式是jar包
   service打包当时是jar包
   web层的打包方式是war包,因为这web层需要webapp 页面等元素
   
   需要注意:在service包中需要添加dao的依赖  直接本地add-dependece 或者手动添加  同理需要在web层引入service模块的依赖
   
   依赖的传递:如果一个依赖a依赖了依赖b,那么我们引入依赖a会同时引入依赖b,但是有种情况除外
              依赖b的作用范围是provided 那么就不会传递
              
   除了子工程之间的依赖,所有的依赖都在父工程中引入.
   然后我们引入依赖后,需要去排除重复的依赖,在点击pom.xml,点击dependece hierarchy 在右边resolved dependence中去看一下 排除同名的依赖
   
   父工程 和子工程之间是继承关系,父工程的依赖 子工程可以直接用,不存在传递的传递
   子工程之间才有依赖传递的说法
   
   
   
   依赖的传递原则:
   1如果两个同名依赖被传递进入,那么谁先声明谁先使用
    比如依赖A 依赖于 c.01  依赖B依赖于c.02  那么先引入A由于传递关系 同时也引入c.01  如果此时引入依赖B,由于c.01已经引入,不再传递进从.02
   
    可以体现为在xml中谁在前面谁在后面 就先用哪一个 或者使用add的时候 谁先添加 
  
  2第二个原则  路径近着优先
   比如我直接引入c依赖,那么依赖a和b的都会失效  因为a.c.01 或者b.c.02的路径比c长,此时优先用短的
   
   
   
   版本锁定:在父工程中使用<dependecyManger>标签对某个依赖进行管理锁定,而这个测试类并不会被继承给子工程
   
   但是子工程在去使用这个依赖的时候,会发现这个依赖的某个版本是被管理的,我们需要去使用这个被管理的版本,这个被管理的版本就是约定好的版本
   ******************************************************
   hibernate和spring一样需要日志依赖
   hibernate需要slf4j的接口以及sl4j-log4j的接口jar包  而spring需要comms.logging接口  而实现这些接口的都是log4j
   **********************************************************
   
   
   版本常量管理:
   在父模块中添加标签
   <properties>
   添加自定义标签比如  <spring.version>xxxx</spring.version>
   </properties>
   
   然后可以在其他依赖的version标签中  通过${spring.version}引用常量 这样的话所有spring相关的依赖都是一个版本并且以后升级的时候也方便修改
   当然也可以在eclipse中使用ctrl+f来替换
   
   
   
