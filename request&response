servlet的注册方式
1<servlet> name class</servlet>
2<mapping....>
或者在创建servlet实现类的时候直接new一个servlet可以一步到位

servlet的匹配和使用方式
1全路径匹配
假如在注册servlet的时候它的url-pattern
<url-pattern>/a/b/....<>
那么要访问这个servlet就必须输入响应的url
2如果是/*  那么代表随意输入什么都可以访问这个servlet
比如/a/* 代表输入/a/任意字符 这个http请求都可以访问这个servlet
<url-pattern>/*<>
3以扩展名匹配
写法  :*.扩展名  
<url-pattern>*.扩展名<>
在http请求的时候如果以.扩展名为后缀的http请求都可以使用这个servlet


三  servletContext类
每个web工程都只有一个servletcontext对象,说白了 不管哪个servlet中
获得servletcontext对象 都是同一个对象
通过父类的方法getservletcontext可以得到这个对象


作用: 
1可以获得全局配置参数 方法getInitparamter()
servetconfig获得的参数每一个servlet独特的参数,是写在每个
servlet配置标签中的参数
而servletcontext获得参数方法 他获得是全局参数,这个全局参数定义在
web.xml的根表签下  而不是某个servlet标签下


局部<servlet><init-param><name><name></init-param></servlet>
全局<context-param>name value</context-param>


2可以获得web资源(文件)
不能获得在javasrc中的文件夹,因为web项目托管到tomcat中后src是变成class文件放在了其他文件夹,所以
有java里面的方法得不到正确的流

servletcontext提供了方法
getRealPath("");  可以得到文件的绝对路径
当里面什么都不写的时候 他得到的路径是项目文件夹(webcontent)的真实路径 
所以 我们所有的配置文件应该放在webContent(java项目中)真的tomcat中webcontent对应的是该项目的根目录里面 然后用这个方法
去找到某个配置文件的绝对路径
getRealPath这个方法只能得到webcontent下文件的绝对路径

getResourceAsStream(""); 这个方法默认得到这个web项目的根目录的流对象
和上面类一样型 指定webcontent(java中的显示)或者说是web项目根目录文件下的文件可以得到该文件的输入流
getResourceAsStream("properties");

对于这两个方法  它们的参数都是一个相对路径 它们参照的对象时web项目的根目录
比如在we工程的根目录下放一个file文件夹里面有一个xml文件
那么可以通过
is = getResourceAsStream("file/stu.xml");
然后解析xml
new SAXReade().read(is);




还有一种通用方法
Class类的get...但是这个方法的参照起始路径是根目录下web-inf下的classes文件
所以需要使用两个../../在去填写相对路径

3.用servletcontext类(获取/存数据)
这里的获取指的是获取从http请求中带的数据
比如在html页面中 点击提交form表单后 发送给服务器的数据
在action=""的这个地址中 一般是一个servlet的地址 
让servlet来处理这些数据 
表单提交的数据是由httpservletrequest的getparameter()方法可以得到数据

而怎么向客户端响应呢?(httpservletresponse对象)
这个response对象提供了getwriter()可以得到一个printwrite对象
这个对象的write方法可以向客户端输出内容
如果是浏览器的话 由于表单提交向servlet 所以是一个空白页面
用这个方法可以向这个空白页面写内容
(我们直接访问servlet都是默认响应一个空白的页面)

而怎么让响应跳转一个我们想要的页面而不是默认的空白页面呢?
比如  如果登录失败 那么就在servlet的空白页面上输出失败
成功了 跳转到我们想要的界面?怎么跳转


两个步骤:
1response.setStatus(302);设置状态码 因为要重新定位 所以是302 重定位状态 
2response.setHeader("Location","地址 绝对 相对都可以");
这里相对参照的是根目录 也就是webcontent
第二个步骤设置要跳转页面的路径 

servletcontext类有两个方法
1setAttributes()可以给这个context对象绑定属性,因为是唯一的,所有的servlet都可以访问
比如 setAttributes("count",object)  第二个参数是给这个属性赋值
 这个值可以是任何类型 不管是基本类型 还是引用类型都可以

2get...("属性名字");返回这个属性的值 返回一个object对象 所以需要强制转化

所有的lervlet是共享一个servletcontext对象的 所以这个类的属性也是共享的


4servletcontext的生命周期
1服务器启动的时候会为每一个web项目创建一个context对象
2它的作用范围 

四
httpservletrequest这个对象封装了所有请求的信息
1getHeaderNames();返回一个枚举类型  装了所有的请求头的名字
2getHeader("头名");请求头的值

注意 设置跳转页面是response里面的方法 
在使用迭代器或者枚举遍历集合的时候  要先得到这个集合的迭代器对象
比如 Iterratore<string> i = list.iterator();


getParameter("")可以得到参数的值
getParameterNames();参数名
(注.这里的参数不是指在servlet里面设置的初始参数,而是http请求的时候
传过来的参数,也就是客户端提交过来的数据,比如get方式在url后面附带数据
或者在html用post方式提交表单到某个servlet后可以使用request的get方法获取
这些提交的数据)

五
request中的中文乱码问题
对于get请求,因为我们提交的数据是放在url后面,所以在地址栏上就已经
以utf-8的方式将汉字编码转化成相应的字节数组了,而tomcat中去接受这个参数的时候使用的是
默认的ISO-8859-1去解码的,所以他们不匹配就出现了乱码

1解决方式
将得到的参数比如
String username = request.getpapamter("username");
此时的username是iso-8859-1解码过后的汉字 他是乱码

现将这个字符串按照这个编码转化原始对应字节数组,然后在通过String的
构造方法构造utf-8的
比如  1  username.getBytes("ISO-8859-1")
      2  new String(username.getBytes("ISO-8859-1"),"UTF-8") 
此时得到的字符串就是正常的


现将iso..编码后的字符串按照iso转化为原始的字节数组,就是在电脑的存储的形式
在将这个字节数组 按照utf-8的形式转化为字符串

很明显 字节数组里面存的东西本来是按照utf-8的形式转化而来



第二个解决方式是 在tomcat中配置解码方法为UTF-8
在servexmlr的 connector标签中配置属性 URLEncoding="utf-8"



post请求以流的方式传输数据,但是request的get方法取参数的时候
是按照默认的iso编码去取的,去以也会乱码,怎么解决呢
很简单一个方法: request.setcharacterEncoding("UTF-8")
设置一utf8方式去取请求体  这个方式不适合于get方式
因为get方式没有请求体

六：
请求和响应的中文乱码解决方案
request：
get请求：由于是在url后面添加数据，所以无法通过设置请求体的编码格式来解决
因为tomcat默认使用ISO-8859-1解码，而浏览器发送过来的应该是UTF-8的字节流
所以将通过ISO-8859-1解码的字符串重新编程字节流
比如 request.getParameter("number").getBytes("");
然后通过String的构造方法  new String（字节数组,"UTF-8"）
将这个字节数组转化成以UTF—8解码的字符串


post请求:这个就简单了 直接设置请求体的解码格式为UTF-8即可  对应api为setCharacerSet()


response:
字符流输:  getWrite().Write("字符串");  
由于默认为以iso的方式发送这个字符串,所以需要先设置发送编码
response.setCharacterSet("UTF-8");
然后保证万无一失  设置告诉浏览器以什么方式解析这个字节流
response.setHeader("Content-Type","text/html;character=utf-8");

字节流:
response.getOutoutsream().write("字符串".getBytes(""));
getBytes默认以utf8方式转化为字节数组 也可以指定参数
然后还是要设置告诉浏览器 发送过来的内容以什么方式解析
response.setHeader("Content-Type");

或者response有一个统一的解决方案:
response.setContentType("text/html;charset=utf-8");
这个方方法不仅告知浏览器以什么方式解码 并且也以这种方式发送内容

七:
访问tomcat上的静态资源的时候会使用tomcat一个默认的defaultServlet去处理他们的
servlet就像是一个文件,可以访问,在超链接中也可以访问一个servlet
超链接中不仅仅只能写一个网址(实质就是一个文件),可以是某个文件的路径,也可以是一个servlet的地址
在url后面加上?file 代表的是一个get请求,在地址后面附加了数据
比如
<a href=="servlet地址?name=123">链接</a>
相对路径或者绝对路径  需要注意的是 参数的值不需要双引号 因为是默认的字符串







