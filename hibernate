框架:软件的半成品,可能已经完成了部分你需要的功能,将我们复杂的功能封装了起来 
Hibernate:
Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架
，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。 Hibernate可以应用在任何使用JDBC的场合，
既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用，最具革命意义的是，Hibernate可以在应用EJB的JaveEE架构中取代CMP，
完成数据持久化的重任。


入门
ORM:对象关系映射 将java中的类和数据库中的表对应起来

下载hibernate开发环境
使用需要  数据库的驱动包  hibernate必须包  c3p0包    日志包

使用过程:
1创建javabean
2创建表  
3创建映射  通过XML配置来完成  统一命名规范  类名.hbm.xml  位置一般和类在一个位置
这个xml有一个约束(约束是对xml里面标签的一个约束)  这个约束可以在core包里面去找 具体在core的第一个文件夹得最后面
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
    
这个约束是指这个xml里面应该有什么样子的标签  只要引入了这个约束 那么xml里只能创建约束中规定的标签
<?xml version="1.0" encoding="UTF-8"?>     class标签用来创建表与类的映射  里面的子标签id用来创建主键与对应列的映射  property用来普通属性的映射
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
   <hibernate-mapping>
   <class name="com.study.hibernate.Customer" table="cst_customer">
   <id name="cust_id" column="cust_id">
   <generator class="native"></generator>
   </id>
   <property name="cust_name" column="cust_name"></property>
   <property name="cust_source" column="cust_source"></property>
   <property name="cust_industry" column="cust_industry"></property>
   <property name="cust_level" column="cust_level"></property>
   <property name="cust_phone" column="cust_phone"></property>
   <property name="cust_mobile" column="cust_mobile"></property>
   </class>
   </hibernate-mapping>   如果类名和表名一致则可以省略table标签 如果属性名和表列名字一样则可以省略colume
     
   4创建hibernate的核心配置文件  hibernate.cfg.xml  在src下创建
   同样的 也得有约束  约束在core第一个文件夹中的最后confg中
   这个xml用来配置和数据库相关的东西以及配置hibernate方言 dialect  比如 加载驱动 数据库名字密码 
   这个方言是指是以mysql的语法形式生成sql语句
   
   <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
	<hibernate-configuration>
	<session-factory>
	<property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
	<property name="hibernate.connection.url">jdbc:mysql:///hibernate_?useSSL=false&amp;serverTimezone=GMT%2B8</property>
	<property name="hibernate.connection.username">root</property>
	<property name="hibernate.connection.password">root</property>
	<property name="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</property>
  <mapping resource="路径com/study/hibernate/Customer.hbm.xml"/>  这个mapping是引入我们建立好的映射 也就是hbm 路径用/分开 相对路径
  <property name="hibernate.show_sql"></property>   控制台显示sql语句
  <property name="hibernate.format_sql"></property>  格式化
  <property name="hibernate.hbm2ddl.auto"></property>  自动创建表 常用 create 如果有则覆盖 update(如果没有则会创建和更新) validate(校验表名和类名是否存在)
  </session-factory>
	</hibernate-configuration>
   
   关于不同数据库的属性名字可以在hibernateproject文件的etc的hibernateproperties中查看
   
   在java中使用
   1加载hibernate核心配置文件
   configuration con=....new configuration.configure()   configure这个函数默认以hibernate.cfg.xml为配置文件 也可以指定参数
   
   可以分开写 configuration configutation= new configuration();
              configuration.configure();
   
   一般来说在核心配置文件mapping标签加载了映射文件 如果标签中没有 
   则手动加载映射: configuration.addresource("映射文件相对路径");
   
   2创建sessionfactory对象  类似于数据库连接池
    configuretion.buildsessionFactory();
   3获取session  相当于一次和数据库的连接
   sessionFacrory.openSession()
   4手动开启事务  hibernate5中不需要手动开启
   session.begintransaction()
   5编写代码...
   
   6
   transaction.commit();
   session.close();
   
   实际上前面几步可以放在一个工具类中
   
   
   二如何引入本地dtd文件约束xml(在没有联网的情况下xml没有提示)
   1、window --> preferencrs --> xml --> xml catalog --> add
   2、location 选择 file system，然后选择你的本地dtd文件。
   3、key type 选择uri。
   4、key 填入 我们使用的外部dtd来源的uri
   
   
   三sessionfactory
     内部维护了hiberbate的连接池  和二级缓存(已经不用了)  它是线程安全的
     
     如果不想用sessionfactory的内置连接池 那么可以使用c3p0  在hibernate的核心配置文件(hibernate.cfg.xml)中引入property  然后导入c3p0jar包
     <!-- 配置C3P0连接池 -->
		<property name="connection.provider_class">org.hibernate.connection.C3P0ConnectionProvider</property>
		<!--在连接池中可用的数据库连接的最少数目 -->
		<property name="c3p0.min_size">5</property>
		<!--在连接池中所有数据库连接的最大数目  -->
		<property name="c3p0.max_size">20</property>
		<!--设定数据库连接的过期时间,以秒为单位,
		如果连接池中的某个数据库连接处于空闲状态的时间超过了timeout时间,就会从连接池中清除 -->
		<property name="c3p0.timeout">120</property>
		 <!--每3000秒检查所有连接池中的空闲连接 以秒为单位-->
		<property name="c3p0.idle_test_period">3000</property>
    
     
    为了只在一个项目中生成一个sessionfactory  可以做一个工具类 然后对外暴露一个返回session(一次连接)的静态方法 
    为了只创建一次sessionfactory 可以在静态代码块中实现
     
     
     工具类
     public class HibernateUtil{
      public static final configuration cfg;
      public static final sessinFactory  sf;
      
      static{
        cfg = new configuration().configure();
        sf  = cfg.buildsessionfactory();
      }
        public static Session getSession(){
            return sf.openSession();
        }
     }
    
     
     
     
     
 四log4j的使用方法,只需要将log4j的属性文件放在src下即可(log4加.properties)
               ### direct log messages to stdout ###
          log4j.appender.stdout=org.apache.log4j.ConsoleAppender
          log4j.appender.stdout.Target=System.err
          log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
          log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n

          ### direct messages to file mylog.log ###
          log4j.appender.file=org.apache.log4j.FileAppender
          log4j.appender.file.File=c\:mylog.log
          log4j.appender.file.layout=org.apache.log4j.PatternLayout
          log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n

          ### set log levels - for more verbose logging change 'info' to 'debug' ###
          # error warn info debug trace
          log4j.rootLogger= info, stdout ,file

五 session (相当于连接) 非线程安全 
非线程安全意味着对象不能当成员变量申明 只能局部变量
session中的方法
save(对象 比如 user)  保存  将对象保存到表
查询 只能以主键为条件查询
get(class c, serializable id);
load(class c, serializable id)

get和load的区别?

 get是在执行函数的时候就发送查询并得到结果
 load是懒加载,  在调用load的时候并不会直接返回结果而是返回一个代理对象
 只有当真正使用这个对象的时候才发送查询语句
  
  修改方法:
  1直接创建对象 然后修改
  是一种覆盖的方式
  session.update(object);
  2查询之后再修改
  先通过get得到customer  然后再该相应的属性  再更新
  
  删除方法:
  delete(object)
  1直接创建对象 然后删除
  2先查询再删除(推荐,可以做到级联删除)
  
  保存或删除方法
   saveorupdate(object 对象)
  
  查询所有或者其他复杂查询
  用session.creatquery();  参数是hql查询语句  
  1使用HQL
  2使用sqlquery
  session.createsqlquery("sql查询")
  
  clear()方法可以清除所有一级缓存 evict()可以删除某个缓存记录
  
  
  
   六持久化对象
   1持久化:将内存中的一个对象持久化到数据库中
   2持久化类: 一个java对象与数据库中的表建立了映射关系,那么这个持久化类在hibernate中成为
   3持久类的编写规则
   Ⅰ需要一个无参构造函数  因为hibernate底层依赖反射
       反射 IOC 
       Class class = Class.forName(className);
       Object object = class.newInstance(); // 只能调用无参构造函数   
   Ⅱ持久类中的属性用包装类类型 比如 Long Integer Double
   Ⅲ动态代理 只能代理实现了接口的类
   Ⅳ持久类不要使用final修饰  因为在hibernate中有个很重要的lazy加载 返回的是一个代理对象  使用的是javasist
   可以对没有实现接口的的类产生代理, 通过继承这个类来代理 如果被继承了 那么lazy不能实现
   
   七主键生成策略
    Ⅰ自然主键
     主键本身就是表中的一个字段,实体的一个具体的属性,比如一个学生有唯一的学号,用学号作为主键就是自然主键
     Ⅱ代理主键
     主键本身不是表中必须的一个字段,或者说不是一个实体实际具有的属性,比如在各种APP中看见的UID
     并不是说代理主键不能唯一标志实体,比如随机生成的ID也能唯一标志用户,
     
     
     在开发中尽量使用代理主键,因为我们不可能让用户自己去输入主键,比如学号?,万一学生输入错误了怎么办?
     所以学号虽然能唯一标志学生,但是不用它作为主键,而是用我们自己的方法去生成一个能唯一标志用户的主键
     
     在hibernate中的主键生成策略:(hibernate会帮我们自动生成唯一的主键 不需要我们在插入数据的时候去手动生成主键)
     1increment: hibernate本身提供的自动增长机制.适用于用long int 或short类型作主键
   	  hibernate会在插入数据会发送select max(id主键) from 查询最大值 然后用id+1作为下一行的主键,这会导致线程不安全
     2identity	.适用于用long int 或short类型作主键,使用的是数据库底层的自动增长机制
     3sequence 适用于用long int 或short类型作主键 采用的是序列的方式
     4uuid 适用于字符串类型的主键 使用hibernate中的随机生成方式生成字符穿
     5native 本地策略  在identity和sequence之间切换
     6assigned 放弃hibernate本地策略 每次插入数据的时候使用自己的方式插入主键 但是如果不给类写入主键那么会出问题
     
     
     如果想要自己生成具有一定格式的主键,那么使用assigned策略,hibernate就不管主键了,需要我们在每次插入数据的时候设置主键值
     如果是String 的而已使用uuid 其他有identity或者native即可
     
     
     八hibernate的三种状态
     1瞬时态对象 无唯一OID 没有被session管理
     2持久态对象 有唯一OID 并且被session管理
     3托管态  有唯一OID(相当于主键),没有被session管理
     
     如果使用save保存一个对象的话,那么更根据主键的生成方式,如果是increment identity  sequence native那么就不能设置主键值  
     如果是assigned的话才能设置主键值 然后保存 ,如果设置了主键值可以用update去更新表中的值,前提是这个主键存在
   
     九持久态对象的特性(依赖了一级缓存)
     1有自动更新的功能
     	  当更改持久态对象的某个值,不需要使用update去更新,当对象更新的时候,会先改变一级缓存中的值,然后当事务提交时和快照对比
	  如果不一致则改变数据库
     
     十
     一级缓存
     hibernate中存在两种缓存机制  一级和两级
     一级缓存:session级别缓存  一级缓存生命周期与session是一致的 一级缓存(对应了一个一级缓存快照区)
     
     
     
     二级缓存是sessionFactory级别的缓存,需要配置的,一般用redis替代
     序列化数据需要实现serializable接口 transient透明化
     
     4种隔离级别:
     1read uncommitted
     2read committed
     3read repeatedable
     4serializable
     
     hibernate中在核心配置文件中设置隔离级别
     <property name="hibernate.connection.isolation">1 2 4 8</property>
     
     5线程绑定的session
     事务一般限定在service层,因为service涉及到多个Dao的操作,那么如何确定多个Dao都是用的同一个session或者connection
     为什么要保证是同一个session?
     为了在当前线程中避免创建多个session,明明可以用一次连接完成dao的多个操作,没必要创建多个
     其次多线程中只要保证session不是成员变量也可以保证多线程数据隔离的问题
     
     1threadlocal 线程绑定对象
	在当前线程绑定session,在dao中调用线程中的session
	hibernate内部已经已经绑定好了threadlocal 
	sessionfactory提供了一个方法 getcurrentsession()可以获得线程绑定的session  但是默认不能使用
	需要通过配置来使用,在核心文件中配置 
	<property name="current_session_context_class">thread</...>
   
   
   
    2向下传递 (DButils)
     在业务层生成session 然后传递给dao层
   
   
    十一:	 hibernate重要api
    1query
    query接口接收HQL字符串,进行复杂查询
    String hql="";
    Query query= session.createquery(hql);
    sql分页是指在已经查询得到的结果的基础上在进步不分页筛选,并不能将所有数据分页
    LIMUIT m,n 可以从m(从0开始)开始查询n条  具体的翻页条件是在其他程序中指定 
    比如一次性查询出所有数据,然后根据页数来进行分页查询得到那一页的数据
    
   hql="from customer"    hql里是以对象为目标的,除此之外和sql很像
   hql="from customer where name like ?"  这里这个?和那个preparestatement很像
   通过query.set给?赋值
   
   query.setfirstresult
   query.setmaxresults
   
   ⅡCriteria(QBC)
   更加面向对象的查询
   criteria criteria= session.creatrecreteria(customer.class)
   list<customer> list = criteria.list()
   这里是查询全部信息
   如果要添加条件
   使用criteria.add(restriction.like("name","王%")) 这里属性列都是用的类里面的变量名而不是表中的
   
   最后的结果统一使用criteria.list(),不用add函数  查询的就是全部行
   分页查询也和hql一致,需要注意的是分页查询第一条数据的下表是0
   
   Ⅲ太复杂可以使用 sqlquery
   
   十二:hibernate一对一关联映射
   一对一映射一般两张表可以合成一张表的,或者使用唯一外键对应,让一方主键成为另一个表的外键,并且约束唯一
   
   十三
   一对多映射(不是指一个表对应多个表,而是两个实体也就是两个表之间有1:n的关系):实质是两个表中行的映射关系
   表1中的一行对应表二中的多行,一个实体1对应多个实体二
   
   一对多在数据库里面体现为在表二中创建属性外键
   在ORM中,则表现为要在多方类中创建单方的类而不是单方类的属性
   而在一方类中要创建一个set集合来存储多方类的多行数据
   这里是双向的,当在也可以只做当上面的任一一种
   
   在hibernate的两个映射配置xml中  这个映射是分别将一方和多方映射到数据库表
   多的那一方 配置  <many-to-one name="" class="" column=""></many-to-one>   name是一方的类属性名字 class是一方类的全路径 cloumn是多方中的外键
   也就是将多方中创建的单方类对象和表中的外键建立映射 在类中外键是一个类  在表中是一个列 
  
  
  一的那一方配置
  <set name="linkMans">
   <key column="lkm_cust_id"></key>
   <one-to-many class="com.study.hibernate.LinkMan"/>
   </set>在一的那一方中维护一对多关系
   <set name>表示一的一方中创建的set集合名字
   < key>子标签代表多方表中的外键名字
   < on to many class>表示的是多方类的全路径名字
   
   一对多的级联操作:
   级联是指操作一个对象的时候,是否操作其关联的对象,需要配置,在没有配置的时候我们只保存一边的类不能够级联保存另外一边,因为时态不一样,持久态和瞬时态
   级联保存或更新:
   操作一方的时候是否操作多方
   需要在在一方的映射文件上配置 <set name="linkMans" cascade="save-update">  class标签新增了一个属性cascade 
   操作多方的时候是否级联一方
    <many-to-one name="" class="" column="" cascade="save-update"></many-to-one>   这个标签多了一个属性cascade
    
    当我们给某一方或者双方设置了级联之后,那么我们操作(保存插入删除)某一方的时候就会操作到它关联的对象
    关联是指我们是否在java语句中设置了多方的外键(一方的类)或者一方的集合(多方类)
    
    级联保存=需要 是否设置了级联+是否有关联(关联=我们操作的那个类是否进行了外键操作,比多一方添加集合 多方添加单方的类,)
    注意 反向的不算关联:比如customer1.getLinkMans().add(linkMan2);
    这里是customer1关联了linkman2 我们保存costomer1会同时保存linkman2  但是我们保存linkman2不能操作customer1
    
    
    级联删除:
    默认情况下我们如果没有设置级联删除就删除一方的数据,那么多方中的对应的行的外键值会设置为null,然后删除一方
    如果要设置级联删除  那么还是在一方 <set name="linkMans" cascade="save-update,delete">  用逗号隔开
    一般级联删除只设置在一方的那一方,多方一般不这么干  要注意的是级联删除需要先查询再删除,不能直接创建主键一样的对象删除
    这样虽然删了,但是这样创建的对象里面没有关联的信息,只能删除一方中的行
    
    
    双向关联会导致多余的sql语句
    单向维护 : 放弃一边的关联
    双向维护:都关联,但是我们需要某一方放弃外键的维护权,一般是一的那一方放弃维护权
    在<set>中配置inverse="true" 即可放弃外键的维护权
    cascade与inverse并不矛盾 inverse负责管理外键维护权
   
   十四:hibernate中多对多的配置(如果是用两个一对多来配置的话需要设置三个类 而多对多只要两个类三个表)
   Ⅰ多对多的实体配置需要在两个类中分别配置对方的set集合 private Set<User> users = new HashSet<User>();
   Ⅱhbm.xml配置: 除了基本属性的映射之外  在class里面还要添加
   <set name="users" table="sys_user_role"> 和一对多有点不同的是 这类table是填写的第三张表 中间表
    <key column="user_id"></key>  key就是中间表中的外键
    <many-to-many class="com.study.hibernate.user" column=user_id""></many-to-many> 这一个就是多对多 对方类的全路径以及对方类在中间表的外键
    </set>
    
    从一对多的角度去看,这是很合理的,一方需要多方的一个集合名称 以及中间表名称 当插入时除了需要在各自的表插入信息,还需要在中间表插入
    一对多中需要的是对方类在中间表的外键,比如当插入一行数据,那么和这一行关联的多行数据可以通过给出的中间表名称以及对方类的全路径
    插入到对面的表中
    
    需要注意的是 当多对多双向操作的时候,必须有一方要放弃对外键的维护权,因为双方都会发送sql语句去维护外键
    那么就会中间表外主键重复出错,一般让被动方放弃对外键的维护权
    
    要注意的是可以单向操作,但是一定要记住需要级联 cascade,否则的话要保存所有对象需要双向操作,不管是一对多
    还是多对多 如果想要保存双方,在没有级联的情况下必须双向操作(双向操作必须有一方放弃外键维护全)
   但明显 单向操作+级联可以不设置inverse
   
   
   十五:重要理解
   Role role2=session.get(Role.class,2L)
   User user=session.get(User.class,2L)
   假如user的roleset里面有二号角色
   user.getRoles()得到的对象列表中的二号角色对象 与直接通过session.get得到role2是否是同一对象?
   一般来说在java中不是同一对象
   但在hibernate的一级缓存中,如果两个对象的OID相同,则它们在hibernate的一级缓存中属于同一对象,也就是当我们
   通过hibernate方法 比如Role role2=session.get(Role.class,2L)得到对象时,它会判断是否是某个已经存在于一级缓存的对象
   如果存在则就将它指向已存在的对象,如果不存在则创建
   
   那么就可以通过set的remove()方法移除某个指定外键 可以通过add添加某个外键
   
   
  
   
   
   
   
   
   
   
   
