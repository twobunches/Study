一注解 annotation
1:@Override 声明当前方法是重写父类的方法
2:@Test 这是junit中的注解
3@SuppressWarning("unused") 
用于抑制编译器警告的注解 比如这个就可以用来抑制某个变量或方法没使用时给我们的黄色警告
4@Deprecated 声明方法为过时的方法,不建议使用

JDK中的除了test 有上述三种原声注解
注解可以在变量,方法,类上面使用
注解中可以添加属性  比如@SuppressWarning("unused") 
比如@Test(timeout=100)  可以声明在单元测试的时候运行时间不超过100毫秒

注解有作用范围:
编译期间有效:@Override @Deprecated @SuppressWarning  用于告诉编译器
运行期间有效:@junit  
源码期间有效:@author @since这些注解是在源码期间有效 String类源码上面的注解

注解是一个和类,接口,枚举在同一个层面的数据类型

二自定义注解
直接创建文件的时候选择Annotation 或者如下格式创建文件

格式 public @interface 注解名{
  public long timeout();注解自定义属性以方法的形式定义属性
  public Class c();
}
注解的属性需要加上(),注解的属性类型有 基本数据类型, String ,Class,注解类型,枚举类型 以及上述类型的一维数组类型

自定义注解作用:配置作用
比如在tomcat的web3.0下没有web.xml文件
在每个servlet上面有一个注解@webservlet("url") 这个注解可以用于给servlet匹配路径
当我们访问这个url的时候,那么这种形式下由于没有xml,那么tomcat回去找所有类的class文件,
查看哪个文件中注解带有这个url的,然后找到这个类class文件之后,通过反射创建对象,然后使用

注解有个文件,由于注解是写在类中,当我们生成class文件打成jarbao发送的时候,用注解配置的数据就不可更该了,而用xml的形式还可以更改

注解什么时候用?
如果配置信息不会发生修改的时候,比如servlet的路径,建议使用注解的形式
如果配置信息经常变化,建议使用properities xml

后面的框架中一般使用xml,和注解配置信息

注解的作用:
1可以用来辅助生成帮助文档
2编译检查
3用于做配置信息吧

使用自定义注解:

public @interface myAnnotation{
  public long timeout();
  public String[] str();
  public Class c();
}

在使用这个注解的时候:
可以使用属性,也可以不使用属性
@myAnnotation(timeout=100,str={"","",""},c=.class)
public void text(){

}

怎么读取属性?
通过反射读取字节码上的注解信息

三什么是Class对象?
Class文件是java文件编译后生成的字节码文件,用来给机器读的,java文件是我们程序员写的,给我们读的
而class对象就是字节码文件在内存中的对象,很明显一个类它有无数的类对象,但是字节码文件的对象只有一个

 Class clazz = Class.forname();获得类的class对象并加载这个类的字节码文件到内存
Method[] methods = clazz.getMethod();可以获得字节码对象所代表类中的所有方法对象数组
这个数组中的每一个方法对象代表了类中的每一个方法
method.getName();可以获得方法对象所代表的方法的名字
method.isAnnotationPresent(注解.class)判断方法上是否存在某个注释 
method.invoke(obj,参数列表)对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。
由于可能这个方法不知道存在于当前类还是父类,所以传入指定对象,以及这个方法所需的参数即可调用成功


四
@Retention(source/runtime/class);可以设置自定义注解的作用范围  这个注解是java自带注解(元注解),使我们写自义定注解时规定范围使用的
@Target(ElementType.method)这个元注解用于指定自定义注解是加在什么元素上面的  
自定义一定要加这两个元注解,不然无法通过Method类的isAnnotationPresent 在方法上找到这个注解

五设计模式
对于某类特定的问题的解决方案设计成一种方案,方便以后应对

单例模式:
保证有些类只会创建一个,保证资源不会浪费
 怎么做呢?
 1首先将构造方法私有
 2在类中声明该类的一个对象,并且static以及private(保证了类加载后只会初始化一次) private保证该对象不直接暴露
 3编写一个静态方法 返回这个静态对象
 比如
 public class Student{
 private Student(){};//私有化构造方法
 private static Student stu =new Student();//由自己创建那个单例
 public static Student getInstance(){
    return stu;
}
}


适配器模式,装饰者模式 ,动态代理,工厂 模式

装饰者模式:
当我们在使用一个接口的实现类的时候,不满意某个方法的功能,那么采用装饰者模式
如果知道实现类名字,可以继承后重写,但是实际上我们无法得知这个类的名字
比如数据库的Connection接口,在我们引入jdbcmysql的驱动包后,Connection被实现了 
我们无法知道它们实现Connection接口的类名字,只是通过DrvrverManager.getConnection()得到它的对象
又或者我们得到的这个实现类驱动是final类型的,无法被继承

所以在这些情况下需要使用装饰者模式:
我们也去实现接口,并在接口内,其他方法使用驱动类的方法,在我们需要改动的方法哪里使用我们自己的方法
前提:必须能够获得被装饰的类 所实现的接口,因为我们也要去实现这个接口
弊端:如果被实现的接口中的方法过多,就不适合,因为要装饰一个方法,而且他方法都需要手动调用驱动类的方法,多了就麻烦

动态代理:
原理:通过虚拟机在内存中创建class文件
那么需要虚拟机这个被创建的字节码文件上应该有多少方法
类名.class.interface()可以得到某个类所实现的全部接口的字节码对象 返回的是字节码数组
很明显通过接口class.getmethod()得到接口中的方法是没有经过重写的,也就是空的


Proxy(代理类对象) 一个带有代理类的指定调用处理程序的代理实例，它由指定的类加载器定义，并实现指定的接口 
Proxy.newProxyInstance("类加载器","指定的接口字节码对象数组","invacationhadler")  ; 
返回一个指定接口的代理类实例，该类实例可以将方法调用指派到指定的调用处理程序。(返回的类型一个Object类) 
  
类加载器处需要定义代理类的类加载器 ,很明显的代理类在哪个类下定义的它们必定所处一个类加载器,
往宽点说在一个src下的类它们的类加载器都一样,这里简单点就直接获取代理类所在类的类加载器即可

第三个参数就是指定方法调用处理程序 需要重写InvocationHandler接口 然后传入被代理类的对象 

那么创建动态代理对象后,调用指定接口的方法就会指派到这个处理程序,在处理程序进行判断,如果是我们需要修改的方法则修改,不是则使用原来类的方法
这样就很简单了

完整程序:

在一个类Text中 假如需要修饰的类名字为car 他所实现的接口是Icar

public class Text{
public static void main(String[] args){
  Icar car=(Icar)Proxy.getnewProxyInstance("Text.class.getclassloader()","a.class.getinterface","new InvocationHandler(){
      public Object invoke(objject proxy,method method,oject[] args){
                                             方法对象     方法参数
       } 
  
  }");
}
}
Proxy.newProxyInstance("类加载器","指定的接口字节码对象数组","invacationhadler")  ; 

动态代理:当使用装饰者模式装饰类的时候,类中的方法太多了,以致于我们重写接口的时候要写太多的方法,虽然我们只改一个方法
但是其他方法也要调用被装饰类的方法.这个时候使用动态代理

Proxy代理类  通过newProxyInstance()创建,有三个参数,传入指定类加载器和指定的接口字节码数组(一般来说我们要装饰的类实现的接口可能有很多,也可能是一个)
所以是一个数组,第三个参数是当我们使用这个代理类去调用指定接口的方法时,会将方法委派到一个调用处理程序,这个调用处理程序需要我们自己来写

第一个参数告诉虚拟机用哪个加载器加载这个代理类,当然是使用和代理类一个包下的去加载了,或者使用代理类所在类加载器去加载也可以
第三个参数就是实现了invocationhandeler(新方法处理接口)的一个类对象 
第二个参数就是被装饰类实现的接口的字节码对象数组

最后newProxyInstance返回一个object对象,我们可以强制转成被装饰类的接口类型,然后使用这个代理类(因为严格来说代理类并不实现接口,所以要强转,而不是多态)

创建好代理类对象后,我们就可以使用这个代理类对象去调用方法了 

proxy的思想和queryrunner的query()很像

字节码加载器:jdk中有一些程序,专业将各种字节码文件加载到内存,这种东西叫字节码加载器
 底层其实就是理由IO流技术,获取到文件加载到内存
有三种:
1引导类加载器  这类加载器准确来说不是一个类
比如String类的加载器 就是这一类 因为保证String的快速加载,这个加载器使用c语言实现的
2扩展类加载器
由java提供的所有类

3应用类加载器:程序员创建 的所有类都是



五使用动态代理解决网站乱码问题
1原来的解决方案是在过滤器中设置request.setcharacter("UTF-8") 但是这个只能针对于post请求,因为这个是设置请求体的编码 而get方法没有请求体
get方法的处理方式只能是在servlet中先用getbyte转码再解码才行,所以有了第二种方案

2第二种方案是 在过滤器之中对getParameter()使用动态代理进行增强
按理说所有servlet都可以用动态代理进行增强,在过滤器中是为了不重复写代码,所有的httpservlet的request对象都经过过滤器中动态代理增强

先使用request.getMethod();判断请求的类型 然后根据不同的类型对request的getparameter进行增强

其他不需要增强方法直接使用 原始request对象中的方法即可,不用担心原来的request中的信息丢失,因为不是使用new的方式调用方法,而是直接传入request对象
最后将得到的request的代理类request_copy使用chain.doFilter(request_copy,response);放行

所以动态代理细分的话 还可以专门为一个对象的方法增强,或者为一个类的方法增强
但是在匿名的实现类中要使用一个对象值的话,这个对象必须是final,类型的,这是语法的约定

3第三种方案是,在过滤器中使用装饰着模式,装饰httpservletrequest类,重新实现接口,然后增强方法,其他方法使用传进来的request调用方法


六:关于class.getmethod() ps:只能得到public属性的方法
这个方法用于获得class对象所代表的的类或接口中的方法对象(包括他们的超类或者超接口中的方法)
有一点需要注意的是,在BaseServlet中重写service,然后让servlet继承benaservlet,虽然按照常规
在Baseservlet中不能获得servlet的方法,因为servlet是子类,
但是由于我们发送http请求到servlet时,获得的是servlet的一个实例对象,然后依次执行inti方法,如果没有则执行父类中的init方法
然后执行service方法,如果没有则执行父类方法,所以,假如我们创建的是Baseservlet的实例对象,当然不能获得子类方法,但是我们获得的是
servlet的对象,它去调用了父类的方法,所以Baseservlet父类中的this代表的是servlet对象的.
子类是可以使用父类的方法的,这里是使用子类的对象去调用的父类方法,自然父类方法中的this代表方法所属的对象,也就是子类对象咯 


七创建通用的baseservlet
实际上一个serlvet的执行顺序是先init.然后service然后destroy

写一个baseserlvet继承httpservlet,重写service方法,通过反射得到调用这个方法的类中所有的方法
然后让servlet 继承baseservlet,在里面写各种逻辑代码,返回跳转页面,在这个servlet中写的其实是各种方法
这些方法由service去调用的

this:
1代表this所在方法所属类的一个实例对象
2代表调用this所在方法的一个对象
所以如果子类对象调用父类方法,那么this可以代表子类对象


也就是我们写servlet后,注册这个servlet,那么在访问servlet回得到这个servlet的对象,继承baseserlvet
会调用baseservlet的service方法,service方法然后通过反射使用this调用servlet中的方法,
而这个方法中写上原来我们在doget()里面要写的内容,然后如果要跳转页面则返回路径,否则返回null
在beanservlet中除了要嗲用这个方法外,还要判断是否要进行页面跳转
在基础的servlet中的方法不用doget和dopost了,把他们的名字改了,改称相应功能的函数,参数还是和doget和dopost一样




八:tomcat的动态java工程中java文件所依赖jar包放在web-inf的lib中
 html页面中使用jquey或者bootstrape所以来的js文件或css文件不是放在lib中,lib中只放java程序依赖的jar包
 js文件是在项目根目录下随便建立一个文件夹存放即可,只要引用的使用找到位置就行


九:对于一个类来说只要里面有main函数就可以运行到虚拟机,否则只能使用junit单元测试运行

十:${pageContext.request.contextPath}是JSP取得绝对路径的方法，等价于<%=request.getContextPath()%> 。
也就是取出部署的应用程序名或者是当前的项目名称。

比如我的项目名称是SSM在浏览器中输入为 http://localhost:8080/SSM/index.jsp
${pageContext.request.contextPath}或<%=request.getContextPath()%>取出来的就是/SSM,
而"/"代表的含义就是 http://localhost:8080

getcontextPath()这个方法得到是当前项目文件的绝对路径,也就是项目的根目录,得到的是/项目名称

十一:
在tomcat下不论是servlet中还是html或者jsp页面,不管jsp页面在哪个文件夹中,默认的相对参考路径都是web项目的根目录
参考路径=http://localhost:8080/项目名称

十二:对同一表,或者换一句话说,对同一个对象进行操作的话,这些都可以放在一个servlet中,然后创建不同的方法,
需要进行跳转的返回路径,不需要跳转的返回null,然后在访问这个servlet时加上方法名字,由baseservlet来调用方法
这样可以有效减少servlet的数量


十三:BeanUtil的底层实现原理

通过反射得到javaBean中的各种set方法,然后用正则表达式判断,(比如 怎么判断setUsername 和username 是一致的)
当判断出有setusername这个方法后,就调用setsuername方法 去取username的值

Beanutil默认只能将String转给String,所以如果有String转date的话需要 自己写一个转换器实现convert接口 然后用convertutil,register注册
或者使用这个工具类自带的方法 DateConvert  然后设置时间的模式 注册即可  

当使用populate方法无法转换时,会调用我们注册的转换类将String转化为date 然后再将这个date赋值给javabean中的date

十四:邮件服务器
安装软件,管理各个邮箱账户中的邮件  接收/发送
邮件协议:发送SMTP 接受:POP3/pop/imap
作用:约定了邮件在网络中的传输格式

怎么在系统中搭建邮件服务器:
直接得到安装包,安装即可 比如易邮服务器,这是一款接受和发送一体的邮件服务器
一般来说发送邮件的服务器和接收的是分开的,


安装邮件客户端:如Foxmail
客户端用来连接邮件服务器的,因为要使用服务器的功能...就好像SQLyog一样
可以理解为QQ邮箱app,就是一个客户端,连接到腾讯的邮件服务器,我们只需要使用客户端就可以使用发送接收功能
查看自己的邮件

可以通过Foxmail来连接不同的邮件服务器,比如163 腾讯的 或者重大自己的邮件服务器,只需要上官网查看一下他们公开的服务器地址即可



