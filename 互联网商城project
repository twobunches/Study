1统一环境配置  原则上一个项目 使用一个文件夹 一个工作空间  赋值一份全新的maven和eclipse到工作空间下
2在maven中  获得文件使用getresource 或者getralpath这两个api  
3省略项目名称的配置：  首先要找到tomcat下conf文件夹下的server.xml，在host里面添加<Context docBase="项目名" path="/"/>    手动映射
或者maven配置tomcat插件时  

<plugin>
					<groupId>org.apache.tomcat.maven</groupId>
					<artifactId>tomcat7-maven-plugin</artifactId>
					
					<configuration>
				    <port>80</port>     指定配置的tomcat的端口号
				    <path>/</path>    这里指当前项目的访问路径 /代表无需项目名即可访问到当前项目   如果是/项目名  那么就代表我们的路径中需要带上项目名
					</configuration>
				</plugin>
                这两种方式都是一个意思  手动对当前项目进行映射

4在url-pattern中  servlet拦截所有使用的是/而不是/*    只有过滤器中拦截所有使用的是/*
5springmvc配置文件中 配置视图解析器的作用是为了返回视图时可以返回一个简缩名字 而不需要返回全路径名     Internal......可以去mvc报下的view去找到这个类
6在mybaties  中tyypealies的作用时设置别名  这样我们就可以使用缩写了   就是说我们可以直接写类名然后 mybatis可以找到这个类
7分页助手和通用mapper   需要先引入依赖  然后在mybatis全局配置文件中 配置为插件
8maven工程打包方式
1.pom工程：
用在父级工程或聚合工程中。用来做jar包的版本控制。必须指明这个聚合工程的打包方式为pom

2.war工程：
将会打包成war，发布在服务器上的工程。如网站或服务。在SpringBoot 项目中，只要我们在依赖中添加了web的启动器，我们就不需要添加打包方式了，maven会自动帮助我们 识别这个项目为war工程。不是springBoot项目的话，则需要指明这个项目为一个web工程。

3.jar工程：
将会打包成jar用作jar包使用。在项目中，不指明的话，默认的就是打包成jar工程，我们也可以添加指明打包方式为jar。


项目点之1   会员列表:新增 编辑 删除  导出  当前会员的分页列表
使用分页查询,使用分页助手和通用mapper
页面使用现成的  前端传来两个分页参数  页码和每页的个数   需要返回一个json对象

根据前端规定的json对象值  设计后端mapper接口
当前会员的分页列表: 
如果使用通用mapper 则需要给pojo类添加注解@Table(name="")  将pojo映射给表  使用@Id@generate设置主键映射 和生成策略 普通字段使用@Column
mybatis的开发不涉及这些注解的  这些注解是用于通用Mapper开发引入的jar包中的注解

查询当前会员的分页列表 传递给后端的参数 {当前的页码,每一页显示的数据条数}  返回值是一个json对象  总数量  以及当前页的会员列表
分页助手  使用PageHelper.startPage(page,rows)设置分页参数  随后对紧跟的第一条sql查询进行拦截分页 然后返回一个List<表对应的类>
比如List<user> list= mapper.select();注意这里虽然list是已经分页后的结果,但是不能直接返回,因为这是分页助手包装List之后的一个结果 不能直接返回
需要使用PageInfo<user> info=new PageInfo<user>(list);
传入分页后的数据 把查询的东西都封装到一个叫做pageInfo的对象中了，可以从里面取出具体的我们需要分页使用的数据，然后存入作用域，在前台显示。

有组件注解标志的类不需要在配置文件中再匹配,  注解或者配置bean都能将类移交给IOC处理
通用mapper很强大  单页查询很好使用   比如selectByexample()  根据条件查询     example.setOrederbyclase()  设置排序条件

新增用户: 使用post  controller方法返回值是responseEntity

删除用户: 也有和put一样的问题  mvc拿不到参数值 
解决方案 
添加一个hidenhttpmethod过滤器 然后将发送的http的请求方法改为post或者get  但是需要多家要给参数名 _method  然后值为delete
springmvc能够接受post请求的表单数据  然后经过过滤器的时候通过_method参数 路由到我们指定为delete的方法上


更新用户:使用 put  请求 传输一个数据过去  内容类型可以是表单 也可以是json 放在请求体中
@RequestParam可以接收url拼接的参数和表单数据；
@RequestBody接收json对象；  用来接收内容类型为json的请求   要记清楚他们的区别 不能随意用  要根据请求的内容类型 决定使用那种注解
也就是说如果是get请求或者表单类型的数据 都是可以用@RequestParam来接受 也可以直接用变量或者对象接受
用@RequestBody会报错  如果请求的内容类型是json就可以用@RequestBody 



项目要点2:
Restful  web service  面向资源的架构
组成:协议 服务器地址 端口号 接口名称 参数列表?

实现一个对外接口:比如一个对外的查询接口,我们应该返回不同的状态
比如根据id查询查询一个用户,我们应该返回一个reponseEntity    然后指定具体的响应码  如果查询得到 则返回200和具体数据 reponseEntity.setStatus().body()
如果查询不到就返回404以及相应体为空  正常来说我们查询不到一般返回的时200和一个null的数据  因为资源时存在的  serlvet是存在的 但是数据库中没有数据

如果在前端控制器中没有指定视图,那么会新生成一个新视图然后将响应体中的东西装进去返回给用户  当然具体返回类型可以指定reponse的返回值类型是页面还是josn嘛




项目要点3:版本控制工具 SVN 和 git   git等会上网速速看一下

两个操作 提交和更新   更新是指将服务器的代码更新到自己上来  提交是将自己的更改提交到服务器
SVN  集中式的   有一个SVN服务器
作用:  1多人共享同一的资源
       2记录每一次变更
       
 安装:  服务端  和客户端    服务端一般企业都维护好了  
 
 客户端分两种:1安装在操作系统上的客户端 2 IDEA或者eclipse等ide的插件形式(常用)
 
 服务端安装:
1服务端需要创建用户(能够连接svn的用户)和资源库(用户提交代码或者上传代码的地方) 
2资源库设置权限 设置哪些用户能访问这个资源库      
   资源库中有三个重要的分支  这些分支位于一个项目文件夹下
   trunk
   branches
   tags
 3在eclipse中使用 过程  打开svn视图界面 然后右键添加svn地址
 4将本地项目发布到仓库中  右键点击项目 点击 team 点击 shareproject  选择svn或者git
 5当我们点share后显示的视图时同步视图  这时候我们需要选择提交
 6提交一个maven项目的话  一般只提交pom文件和src下的文件     
 7一定要先同步 再去做更新或者提交  操作     
 更新指将仓库代码和自己代码对比 需要从仓库更新
 提交指将仓库代码和自己代码对   需要提交到仓库
 
  8检出操作 当我们获得一个项目时 从仓库拿出来
  从svn中心仓库提取代码   而捡出的代码一般不是maven代码 需要使用ide自带的功能去构建为maven工程
  
9解决冲突  在没有同步情况下去提交代码 可能会出现的问题   解决冲突选哟人工去解决
解决完了 标记为合并然后提交即可

一般在对一个文件进行修改时 只要两个以上的人同时修改然后提交 第二个人就会发生冲突
即便对代码进行同步也会发生,因为我自己没改自己的代码和svn仓库别人更改之后的不一致

发生冲突是因为  自己原始的代码和已经发生更改的svn的代码不一致
也就是自己在获得某个文件的更新后 这个期间svn上的代码又被别人更新了 

怎么解决呢 将自己更改后的代码复制一份 然后将自己代码还原 然后和svn同步 
将自己的原始代码更新到svn的最新版本   然后在最新版本上添加自己的更新 然后提交

当然也可以强行提交自己的版本  结果就是 会刷新掉别人的更改  因此 冲突需要去沟通然后解决

Git工作流程
工作流程如下：
1．从远程仓库中克隆代码到本地仓库
2．从本地仓库中checkout代码然后进行代码修改
3．在提交前先将代码提交到暂存区
4．提交到本地仓库。本地仓库中保存修改的各个历史版本
5．修改完成后，需要和团队成员共享代码时，将代码push到远程仓库


项目要点3:使用nginx做负载均衡




项目要点4:商城主要功能
1后台管理系统:
商品管理 商品类目 查询商品 商品属性规格  内容分类管理 内容管理
实现一个商品类目并且显示出来
		1使用easyui的树形菜单作为显示商品类目的视图  树形菜单需要一个json数组的数据
		2因此通过一个ajax请求后端 返回一个类目数组
		3很明显初次点击类目表 是不带id的  因此后端接受参数需要有一个默认值  默认值在一级目录的父亲id  0
		4我们去点各个一级目录时会发送请求 并且带回该一级目录的id  通过该id去找以这个id为父目录的子目录

nginx的使用:






2前台系统 用户可以在前台系统进行注册 登录 浏览商品 下单
3会员系统 用户可以在该系统内查询已下的订单 收藏的商品 
4订单系统:提供下单 查询订单 修改订单状态 
5搜索系统:提供商品的搜索功能
6单点登录系统:为多个系统之间提供用户登录凭证以及查询登录用户的信息

分布式系统架构  
  不同的系统 位于不同的tomcat服务器上 访问 一个数据库服务器
  比如订单系统 会员系统  后台管理系统 搜索系统








