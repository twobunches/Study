1 .Oracle服务端的安装  oracle11g
https://blog.csdn.net/qq_43437465/article/details/90402896?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase
安装教程在以以上连接中

2开启或者关闭Oracle服务   手动在任务管理器开启或者关闭一下服务
oracleserviceoRCL
oracleoradb11g_home1TnsListener    这是核心的两个Oracle服务,一般开启这两个服务就够了


运行services.msc  然后开启上述服务,其他oracle开头的也可以启用

3虚拟机配置网络

点击VMware客户端的编辑选项
选择编辑网络编辑器  选择仅主机模式 勾选将主机虚拟适配器连接到此网络和使用DHCP 
然后添加一个网络  

之后我们就可以将我们想要的虚拟机配置指定的网络

4连接到oracle数据库  可以使用服务端自带的SQL-plus窗口 或者免安装的instanceclient客户端
在oracle里只有一个数据库orcl
cmd窗口连接  sqlplus  用户名/密码@地址(本机用localhost外部的用ip) :1521/oral

5 PLsql  
  这是一个基于instanceclient的图形化客户端 
  如果服务端和客户端不在一台机器上
     Ⅰ那么在客户端上需要先安装instanceclient,并且将tnsnames.ora复制一份到instanceclient的安装根路径下,
     Ⅱ并且打开PL客户端的配置(confidgure)-设置oracle的主目录名,也就是instanceclient文件夹地址  
     Ⅲ然后还需要在客户端的电脑上设置环境变量TNS-ADMINE =等于tnsnames.ora文件的地址
  
  如果服务端和客户端在一台机器上
    不需要上述繁琐的操作,只需要安装PLSQL即可,并且也不需要安装instanceclient(免安装的)
    因为当安装好服务端后自带了客户端,所以不需要上述操作
**********************************************************
 另外还需要配置下面两个文件

6在oracle 服务端中中有两个重要的文件
listener.ora文件   监听文件

listener.ora是服务器端用的，oracle监听程序，就是读的这个文件，里面有oracle服务器端的socket监听地址和端口（
如果要想局域网中的其他人，能够访问我本地的oracle，要把我本机的地址写进去，如10.11.19.19
文件地址：\oracle\product\10.2.0\db_1\NETWORK\ADMIN
LISTENER =
	(DESCRIPTION_LIST =
		(DESCRIPTION =
			(ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))
			(ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))
			(ADDRESS = (PROTOCOL = TCP)(HOST = 10.11.19.19)(PORT = 1521))
		)
	)


tnsnames.ora文件  客户端连接配置文件 客户端通过读取这个文件连接数据库

tnsnames.ora是记录客户端访问数据库的本地配置：
客户端是通过tnsnames.ora来识别连接服务器的(所以这是为什么当我们下载PLSQL后需要将这个文件复制到instanceClient下 并且配置环境变量)
如果你没有添加tnsnames.ora,那么你就连接不上服务器的。。
文件地址：\oracle\product\10.2.0\db_1\NETWORK\ADMIN
在连接配置文件中添加一下配置即可:
ORCL(数据库别名) =
(DESCRIPTION =
	(ADDRESS_LIST =
		(ADDRESS = (PROTOCOL = TCP)(HOST = 主机地址)(PORT = 端口))
		(CONNECT_DATA =
			(SERVER = DEDICATED)
			(SERVICE_NAME = orcl)
		)
	)
)
其中，每个部分的解释如下所示：
l PROTOCOL：客户端与服务器端通讯的协议，一般为TCP，该内容一般不用改。
2 HOST：数据库所在的机器的主机名或IP地址。不管用主机名还是IP地址，在客户端一定要用ping命令ping通数据库所在的机器，否则需要在hosts文件中加入数据库所在的机器的主机名和IP地址的对应关系。
3 PORT：数据库监听器的端口，可以查看服务器端的listener.ora文件或在数据库服务器中通过lsnrctl status [listener name]命令来查看。一般为1521端口。
4 SERVICE_NAME：在数据库中使用“SHOW PARAMETER SERVICE_NAME”命令查看，一般情况下和DBNAME相同
**************************************************************************************************************************************************************
开机后，启动任务管理器，发现oracle监听服务无法启动，导致PLSQL无法连接。原因在于，本机的IP地址发生了变化。解决办法就是修改监听和连接配置文件,将ip地址改为目前的ip
***************************************************************************************************************************************************************

v
七Oracle数据库的体系结构
通常情况下,Oracle数据库只会有一个实例orcl

 MYSQL:一个项目创建一个数据库,创建相应的表
 oracle:一个项目创建一个表空间 在这个表空间创建用户(主人),用户去创建表

Mysq是多数据库,不用用户同不同数据库
Oracle是多用户的 用户拥有表空间的权限



八Scott用户和HR用户  ORCALE提供的用户,这些用户下的自带表可以让我们把oracle练习一遍

    Scott用户下的表  这些表已经自带了数据
     ⅠDEPT表
     2EMP表
     3......

    HR用户
     Ⅰjobs
      ⅡEMPLOYEES
       ......
         
         
   九基本查询
   SQL四大类:
     DDL:数据定义语言 create
     DML:数据操纵语言 insert
     DQL:数据查询语言 select
     DCL:数据控制语言 grant 权限控制
         
      在Oracle中DQl语句 select的结构和mysql中一致 select * from where   group by  having  order by
       但是还是有区别:
       在Oracle中 select 1+1;是错的  缺少一个表from字段
       在mysql中 select 1+1; 会自动生成一个带有一行值为2的表
         
        在oracle中 需要 select 1+1 from dual; 
        dual表是oracle中的虚表,伪表,主要是用来补齐语法结构的
        这个虚表可以用于计算
        
        但是如果是select 1 from 一个真实的表  这种方式是得不到第一列数据的 这个和mysql还是有区别的

        Ⅰ 别名查询:使用as关键字,可以省略
         select ename(as) 姓名,sal 工资 fron emp;   
	 别名不能带空格 如果要空格那么别名必须需要使用双引号
	  可以省略as 也可以省略双引号 
	  取别名得时候不能使用单引号 Oracle中被单引号括起来的是字符或者字符串  oracle只认为双引号括起来的为别名
          在Oracle中除了别名使用"",其他都要使用单引号''表示字符
	   数字作为别名的时候可以省略as但是一定不能省略""
        Ⅱ去除重复字段使用distinct关键字
          select distinct hob from emp;  不管是多列

        Ⅲ 则运算:数字属性列之间可以四则运算 比如sal+comm
           但是要注意的是 如果是数字+null=null
           怎么解决这个问题呢?
           nvl函数 ---- nvl(列名,0)  作用:如果参数1为null,返回参数2

         Ⅳ字符串拼接
          select ename from emp; 在oracle种使用||进行拼接
          比如select '姓名:'||ename from emp;
          查询出来的效果就是每一行的前面带上了姓名:
          在MYSQL种使用concat()进行拼接,oracle也有这个函数
          比如select concat('姓名:',ename) from emp;   
          
          *******************************
          这里说一下不管是Oracle还是Mysql种查询语句怎么执行的
          查询对表种的每一行先进行where字句判断是否符合条件
          如果是符合条件的再进行select的投影查询,取出相应的列
          在selec中还可以对相应的列进行处理,比如上面的字符串拼接
          ***************************************
          
    十条件查询  就是where后面的条件
      Ⅰ关系运算符:> >= < <=
        逻辑运算符 and or not
        其他运算符 
          模糊查询 like  %匹配多个字符 _匹配单个字符 匹配字符串用单引号''括起来
          select *from emp where ename like 'S%'  这个就是以s开头的所有名字   '__O%第三个字符是o的姓名 '
          \通配符 被\修饰的%或者_就代表自身   
          比如select *from emp where ename like '%\%%'  姓名包含%的人
         
          in  in可以直接用在一个集合()   也可以用在子查询
         
          between .. and..
          
          is null  空
          
          is not null  非空
          
          排序查询:
            order by 列名
            升序 asc
            降序 desc
             select * from emp order by comm desc null first 或者 last;
             排序中的空值可以使用 null first或null last 把null值放在最后面或者最前面
             
          排序多列:
          select deptno,sal from emp order by deptno asc,sal desc 按照编号升序 工资降序
          这种排序是指必须在编号升序的形况下,再对编号相同的号码进行工资排序,也就是有一列是
          完全升序降序,而另外一列是部分排列的
    
    十一函数 
       函数:必须要有返回值
       单行函数:对某一行中的某个值进行处理
          数字函数
            ceil()向上取整  floor()向下取整   select ceil(42.6) from dual;
            round(参数1,参数2) 四舍五入函数 保留(参数2)个小数
                round(42.926,2)=42.93
                round(42.926,1)=42.9
                round(42.926,0)=43
                round(42.926,-1)=40
                round(42.926,-2)=0
                负数就代表向左边看
            截断函数trunc(1,2):截断和近似值函数类似 只不过不进行四舍五入而是直接截断保留小数
            求余函数: mod(参数1,参数2) mod(9,3)=0
             
          字符函数
           substr(str1,起始索引,长度) 用来求一个字符串的子字符串的  
           但是要注意索引不管是写0还是写1,都是从第一个字母开始截取
           length()获取长度
           trim()去除字符串左边和右边的空格
           replace(str1,'字符a','字符b')
         
          日期函数
             查询当天日期  select sysdate from dual;  这里要注意不需要()
             查询3个月后的今日的日期
             select add_months(sysdate,3) from dual
             查询三天后的日期
             select sysdate+3 from dual  这里是根据当前计算机所得
             months_between(日期1,日期2) 返回两个日期之间的月数
             *******************************
             要注意的是日期类型相减会得到一个数值类型,这个数值类型的值=日期的差值所对应的天数(day)
             
          转换函数
              字符转数值  这里的字符包括字符串 在oracle中''单引号括起来的都叫字符
              to_number(str)   select 100+'10' from dual 这个没问题  oracle帮我们自动转换了
              数字和日期转字符
              select to_char(sal,'$9999.99')   比如sal是1270.236 那么结果就是'$1270.23'
              select to_char(sysdate,'yyyy-mm-dd hh:mi:ss')  这里和java的date类有点像 将日期格式转化为我们想要的类型
              
              select to_char(sysdate,'d') 返回的是这一日期是一周的第几天
              select to_char(sysdate,'dd') 返回的是这一日期是一个月的第几天
              select to_char(sysdate,'ddd') 返回的是这一日期是一年的第几天
              select to_char(sysdate,'day') 将日期转化为一周的英文单词
              字符转日期:
               to_date('2017-02-16','yyyy-mm-dd') 这里第一个参数是字符串的日期 第二个参数是描述其结构的参数
               比如对日期属性的列 我们要得到某2个日期之间的行
               select * from emp where date between to_date('1982','yyyy') and to_date('1990','yyyy')
                这里得到了日期位于1982年和1990年之间的行
          通用函数
            nvl(参数1,参数2)  如果参数1是null,就返回参数2 否则返回参数1
            nvl2(参数1,2,3) 如果参1=null 那么返回参数3 否则返回参数2
            nullif(1,2) 如果参数1=参数2  返回null 否则返回
          条件表达式:
             case 字段(属性名)
                 when 值1 then 值
                 when 值2 then 值
                 else 
                      值
                  end
            比如   select  case ename
                       when 'smith' then 'hh'
                       when  'mmm'  then 'xx'
                       else 'hp'(默认值)
                     end
                     from emp;
            这里的条件表达式就是对满足条件的行的某些字段(列) 进行进一步的筛选以及做一些处理
            比如上述例子将名字为smith的变成hh  将mmm变成xx 其他的都变成hp  上面的写法是通用写法
            Oracle特有的写法 decode(ename,'SMIth','刘备小儿','scott','曹操','路人乙')  和上面的功能一致,最后一个参数是不满足条件要变的默认值
            
            
       多行函数:对某一列的所有行进行处理
            比如max() min() count() sum() avg()  等五种聚合函数
             多行函数是自动忽略空值的
             多行函数可以用数字来代替列名 比如count(2)= count(ename)
    
       分组查询
          方式 语法和mysql一致
          where后面不能接聚合函数,,可以接单行函数
          having 可以接聚合函数也能接单行函数
	  
	  要注意的在分组查询之中使用聚合函数 这里聚合函数处理的是每一个组  比如select max(sal)  .....这里是求每一个组的最大值	  
十二:多表查询	  
	 select * from 表一,表二;
	 多表连接在没有where子句的情况下是一个笛卡尔积的结果,笛卡尔积的结果是表1*表二行数,每一行的属性是两个表所有的属性
	 但是这里没有指定连接条件,因此有很多无意义的数据,要设置连接条件 在where子句或者显示内连接 
	  
	  显示内连接:指的是连接条件在from子句里面 
	   	连接查询后两个表名字相同得列一定要用表明来引用,虽然没什么区别
		select e1.empno,e1.ename,d1.deptno,d1.dname,e1.mgr,e2.ename,e2.deptno,d2.dname
		from emp e1,emp e2,dept d1,dept d2 
		where
		     e1.deptno = d1.deptno
		  and e1.mgr = e2.empno 
		  and e2.deptno = d2.deptno;
		 **********************************************************8
		 有时候连接并不一定依赖于外键 比如
		select emp.empno,emp.ename,emp.sal,
		 case salgrade.grade
		 when 1 then '一级'
		 when 2 then '二级'
		 when 3 then '三级'
		 when 4 then '四级'
		   else
		   	'五级'
		 end  "等级"	
		from  emp,salgrade
		where emp.sal between salgrade.losal and salgrade.hisal; 
	           这里查询了员工的号码 姓名 工资以及工资的等级  工资的等级在工资等级表中 而在这个表中每个等级都有一个最高工资和最低工资
		   如果工资在这个等级的工资范围内就属于这个等级,那么当我们根据员工的工资去连接表的时候,条件是这个员工的工资是否在这个范围
		*******************************************************************************
	        可以通过条件表达式或者decode()进一步处理单个属性列,要注意条件表达式case 后面没有冒号,直接跟when then 然后when then之间也又没,号
		 只有属性列和属性列之间存在逗号 或者表与表之间存在逗号 但是最后一个属性列或者最后一个表不需要逗号
		   
		 
	  隐式内连接:
	  	select *from 表一 inner join 表2 on 条件
			    inner join 表3 on 条件.....
	 	外连接:
		select *from 表一 left outer join 表2 on 条件
			    left outer join 表3 on 条件.....
               右外连接一样的
	       
	   这里是通用的外连接写法:
	   在Oracle中的外连接(+):
	     select * from emp e1, dept d1 where e1.deptno=d1.deptno(+);
	       这里再属性后面添加(+)的意思是,在连接两个表的时候,如果右边不存在相应的行和左的某行对应
	       那么保留左边中所有行,并在右边不存在的属性列全部+空值
	       
	       意思就是左外连接 在Oracle中给右表的连接属性上添加(+) 表示不存在的话添加空值
	               右外连接 在Oracle中给左表的连接属性添加(+)  表示保留右表 给左表添加空值
	       
	       
	       
十二子查询
    就是在查询里面再嵌套一个select子查询  子查询分为相关子查询和不相关子查询
    如果内层select使用了外层select的参数,那么就是相关的    
	    子查询不需要以分号结尾,只需要用小括号()括起来即可     
	    相关子查询:    
	    select * from emp e,dept d
	    where sal=(select min(sal) from emp where deptno=e.deptno )
	    and e.deptno = d.deptno;    

	    不相关子查询:
	     select * from emp
	    where sal > (select sal from emp where empno=7654)
	    and job = (select job from emp where empno=7788);
    in  not in(集合或者子查询)   不能带null值
 ***************************************************************************
 	   在Oracle中子查询配合in 或者 not in使用时 子查询里面的结果不能包含null值
	   因为oracle不支持null和任何类型的比较,那么在判断in的时候由于无法判断和null是否相同
	   最后无法得到结果 
	   我们要清楚的是查询出了null值就代表这个集合有东西了  不是一个空的集合
	   一个空集合和带null值的集合是不一样的
	   所以我们在查询的时候一定要排除null值 加上判断语句 xxxx is not null
***************************************************************************
			   
	 exists(子查询语句)  当exists里面的查询语句有至少一条结果时,返回true 否则返回false
	 not exists(子查询在语句)   当not exists里面的查询语句的结果为空集合时返回 ture 否则返回false
	  由于只需要判断子查询是否有结果,因此子查询语句一般都是select *

	   比如查询有员工的部门的信息
	   select * from dept d where exists(select * from emp where d.depno=depno)
*****************************************************************************
rownum:伪列,系统自动生成的一列,用来表示行号,从1开始,由Oracle提供我们可以直接使用的一个属性列
	 select rownum,empno from emp;
	 假如我们想要最后结果的前三条 那么只需要  rownum<=3
	 但是rownum最好不要去做>的判断,为什么呢?
	 因为我们都清楚在where判断的时候都是一行一行判断的,而rownum是判断完一行,如果符合条件则rownum++
	 如果不符合调教
	 比如条件rownum>2的条件永远不能满足,因为判断第一行的时候,行号是1 1>2不成立 那么继续判断第二行
	 由于第一行不成立,因此第二行的行号仍然为1 此时继续判断仍然不成立
 SQL执行顺序:form where group by having select order
     但是rownum是属性列位于select中,所以它的执行顺序在order前面
     如果用rownum编号顺序后,再执行order语句,那么会打乱rownum的编号,那么此时直接使用rownum是没有意义的
     因为添加行号是在排序之前
     
     那么排序+取特定行的解决方案是什么呢?
     我们可以折中一下,因为order影响了rownum,那么我们可以将order by排好序的查询结果 当作另外查询的一个表
     在这个查询中我们添加rownum ,那么就可以给排好序的查询结果添加行号
     
	 select rownum, o.* from (select * from emp order by sal desc) o where rownum <=3;	 
	 这样就选择出了工资最高的三个人
	************************************************ 
	 统计每年入职的员工个数
	 小技巧:可以使用聚合函数去除带有null的行(仅针对一行不为空值,多行null 的情况下)
	        比如  year     那么可以通过sum函数或者 变成   year
		       1987     			     1987    因为聚合函数最后得到一个值 然后将聚合函数取别名					
                       null 
		       null  
	   sum(year) as "year"  这样就可以取消空行 
	   
	   
	   select  to_char(hiredate,'yyyy') year,count(*) num from emp group by to_char(hiredate,'yyyy');
	   	 year   num
	   	1987	2      查询出来是这个效果
          	1980	1
          	1982	1
           	1981	10

	   但是我们想要  total  1987 1980 1982 1981   该怎么办呢?
	   		 14 	 2     1    1    2
	   
	   首先total    可以通过  select sum(num) total from  (select  to_char(hiredate,'yyyy') year,count(*) num from emp group by to_char(hiredate,'yyyy')) sub;
	   	 14        将上面的查询结果当作一个新表进行查询,然后利用case来改变year的别名和数字
		 *************************************************************************************
	 显示   1987
	         2
		 
		 select sum(case year when '1987' then  num end ) as "1987" from  (select  to_char(hiredate,'yyyy') year,count(*) num from emp group by to_char(hiredate,'yyyy')) sub;
		 然后可以使用sum()或者avg函数取消null的行 因为有三行不满足year=1987 那么就会出现null
	         
	   合并:
	   select sum(num) total ,
	          sum(case year when '1987' then  num end ) as "1987",
		  sum(case year when '1982' then  num end ) as "1982",
		  sum(case year when '1981' then  num end ) as "1981",
		  sum(case year when '1980' then  num end ) as "1980"
	   from  (select  to_char(hiredate,'yyyy') year,count(*) num from emp group by to_char(hiredate,'yyyy')) sub;   	
*************************************************************************************************
	  rownum:伪列 行号 每查询出满足条件记录之后,就会添加一个行号(不管是rownum还是rowid都是可以直接使用的属性列)
	  
	  注意在给一个select添加rownum,然后要选择所有属性使用*的时候一定要记住给表别名
	  比如    select rownum,.e.* from emp e;  
	  
	  rowid:表示表中每行数据指向磁盘中的物理地址
	   应用场景:
	   create table stu{
	     name  varchar(20)
	   }	   
	   
	   insert into stu values("龙哥")
	   insert into stu values("龙哥")
	   insert into stu values("龙哥")
	    insert into stu values("老唐")
	    insert into stu values("老唐")
	    insert into stu values("老唐")
	   
	   怎么删除stu表中重复的列呢? 注意是删除
	   由于rowid指向了磁盘中的物理地址,因此名字重复的行的rowid一定有一个值是最小的,因此我们只要找到最小的地址 然后将
	   大于这个地址的行都删了就行
	   delete from stu s1 where s1.rowid>(select min(rowid) from stu s2 where s1.name=s2.name)
	   delete from stu s1 where s1.rowid not in(select min(rowid) from stu group by name)
	   ******************************************************************************************************
	   
	   分页查询:
	   在Oracle中分页查询只能使用rownum实现   mysql使用limit m,n关键字  这里Oracle要麻烦一点
	   由于rownum不能使用>,所以不能直接在一次查询中实现分页查询
	   但是我们可以将带了rownum的查询作为一个新查询的表 这样就能行了,这个和排序反着来的
	   排序是先排序在作为新表  分页是先使用rownum 然后再作为新表分页
	   
	   查询emp表的第六到第十条信息
	   select * from (select rownum as '行号',e.*from emp e) newemp where newemp.行号 between 6 and 10;
	   这里要注意的是需要给新表的行号取一个别名 
	   ************************************************************************************************
	   rowid:可以用来删除重复行                     *****************很重要*******************************
	   rownum:用来排序取行和分页查询
	   
	   查询工资排在6-10的员工的信息
	   首先要将emp表按照工资排序作为一个子查询表a  
	   然后对表a查询rownum as "行号"(分页查询一定别名)得到表b  
	   然后对表b查询行号位于6-10的行    如下
	    
	   select b.* from (select rownum as 行号 ,a.* from (select * from emp order by sal desc) a) b where b.行号 between 6 and 10;
	   *********************************************************************************************************
	   集合运算:
	   并集运算:将两个查询的结果合并,重复的只算一条 要求属性列一致
	   union:除去重复的数据
	   union all:不除去重复数据
	   查询1 union(all) union
	   
	   差集运算:查询1 minus 查询2
	   
	   
	   
	   select *from emp where sal > (select avg(sal) from emp where deptno in (select deptno from emp where sal=(select max(sal) from emp))) and sal >(select avg(sal) from emp where deptno in (select deptno from emp where sal=(select min(sal) from emp)));
	   
	   
	   
	   十三:DDL,DML,视图,PLSQL编程
	   DDL:数据定义语言
	   	 Oracle:创建表空间(逻辑单位通常我们新建一个项目,就会新建表空间,然后创建用户,然后用户创建表)  
		 表空间创建之后必须创建用户
		 一般来说一个用户默认只有一个表空间
	   
	   创建表空间
	   语法: create tablespace 表空间的名称
	   	  datefile '文件的路径'(服务器上)
	   	   size 大小
		   autoextend on 自动扩展
		   next 每次扩展的大小
	   
	   
	    create tablespace 神界   这里表空间名字不用引号
	    datafile 'D:\Oracle\tablespace\shenjie.dbf'  dbf后缀代表数据库文件   数据库文件在我们需要的服务器路径上创建即可
	    size 100m                                                          可以不用事先创建shenjie.dbf,如果不存在会自动创建,但是文件路径一定要对
	    autoextend on
	    next 10m;

		删除表空间语句用 drop tablespace 表空间名
	   *******************************************
		
	   创建用户(sys或者system用户才有权限创建用户)
	   	create user 用户名
	        identified by 密码
	         default tablespace 神界;
	   新创建的用户需要sys授权之后才能登录,比如建立会话的权力也就是登录的权力
	        grant 角色|权限 to 用户	
   	        角色有比如DBA角色,可以拥有所有权限
	   ************************************************************    
	    创建表
	    create table 表明{
	    列名 列的类型{列的约束},
	     列名 列的类型{列的约束},
	     列名 列的类型{列的约束}
	    } ; 
	    类型  varchar(255)  可变长度  实际长度根据字符串 Oracle暂时支持
	    varchar2
	    char () 固定长度
	    number (总长度,小数长度) 数字类型  小数长度<总长度
	    date 日期
	    timestamp(时间戳1)   更精确
	       
	     char类型 如果设置了大小而字符串的长度不够,那么会后面用空格填充,注意是空格字符 
	     如果我们把'hello' 赋值给 char(10)   那么就是'hello     '  !='hello'的 
	       
	      Long/clob:存放长字符串变量  存放字符数据
	      Blob:存放二进制数据  可以存放电影  用java将电影文件转化为字节流,也就是二进制数据,然后存进去  也可以有java读取 
	      
	     ****************************  
	       使用子查询创建表
	       create table 表名 as  子查询;
	       
	       可以使用用户名.表名引用其他用户下的表(前提是拥有该权限,比如DBA的权限可以修改所有表空间的表)
	       
	       比如select * from scott.emp;
	       craate table emp1 as select * from scott.emp;  可以用这种形式复制一个表
	       如果子查询有结果那么会复制表结构和数据,不会复制约束,比如主键,非空等约束
	       如果子查询没有结果那么只复制表结构,没有数据,也没有约束
	       
	       
	     修改表:添加列  修改列  删除列  修改列名
	     添加列: 
	     	 alter table 表名 add 列名 类型 ;
	     添加多列 
		 alter table 表名(
		 add 列名 类型, 
		 add 列名 类型);    用小括号括起来
	       修改列:  修改类型 modify
	       alter table 表名 modify 列名 新类型;
	       修改列名:
	       alter table 表名 rename column 旧名 to 新名;
	       修改表名 rename 表名1 to 表名2;		
	       删除表:drop table 表名;
	       
	       列的约束:
	       主键 非空 唯一 check 外键
	       
	       create table student(
	       		stuid number primary key,
			aname varchar2(10)unique
			age varchar2(10)not null
			gender varchaer2(4) check(gender in ('男','女','人妖'))
	       )
	       
	       truncate可以用于删除表中所有记录但是保留表结构
	       
	       外键约束:
	       	被外键约束的列,要么为null值,要么这个值必须存在于被参照的表中
	       添加外键约束:
		 创建表的时候创建
			  foreign key references 表名(列名)
		 创建表之后添加外键约束:
			  alter table product add foreign key(列名) references 表名(列名); 
	       	
		 	
	         有了外键约束后,我们使用drop是删除不了被参考表的
		 强制删除:
		 drop table 表名 cascade constraint ;  这个语句会删除那么参照它的表中的外键约束
	         
	          级联删除:
	       	  需要我们在添加外键约束的时候,使用级联约束
		   alter table product add foreign key(列名) references 表名(列名) on delete cascade;
	 *********************************************************************************************************
	 DML:
	 插入数据:
	 insert into 表名 values()  默认插入一行的所有属性
	 insert into 表名(列) values()  插入一行的某些列 但是非空的列比如插入
	 
	 子查询插入数据:
	 insert into  表名 子查询语句;
	 更新数据:
	 update 表名  set ... where...
	 删除
	 delete from 表名 where ...
	 
	 delete和truncate的区别:
	 delete      truncate
	 逐条删除     删除表在创建表(没有数据)
	 支持事务      不支持事务 不可回滚
	 ***********************************************************
	 事务:
	 在PLSQL中对数据库的更改 DML的操作在执行之后需要我们手动commit
	 
	 Oracle隔离级别: read commited serializable,read-only
	 
	 提交:commit
	 回滚:rollback
	 事务的保存点:savepoint 设置保存点 那么我们在发生异常的时候可以选择回滚到保存点而不是全部回滚
	 
	 比如    savepoint  名字;
	 	 rollback to 保存点名字;
	*********************************************************************8
        视图:是由数据库中的表或者视图创建的一张虚表,数据库中只存储视图的结构而不存储视图里对应的数据
	视图实际上是不存放数据的
	  用处:
	 1对复杂查询结果进行封装,封装成一个视图后,可以直接select * from 视图,而不需要再来一次复杂的查询
	 2屏蔽表中的细节,比如我只想让某个人看到表中的特定列,那么可以查询出这些列然后封装成视图
	 create[or replace] view 名字 as 子查询 [with read only]
	
	 
	 视图
含义：虚拟表，和普通表一样使用（可以理解为超大的起别名或封装函数）
      不保存真实的数据，只保存SQL逻辑
语法：
	create view 视图名
	as
	select 列名
	from 表1
	【连接类型】join 表2
	on 连接条件
	【where筛选条件】
	。。。
	；
	
具备以下特点的视图不允许更新：包含的SQL是指创建视图时的子查询语句SQL,通过什么SQL语句得到的视图
	1、包含以下关键字的SQL语句：分组函数、distinct、group by、having、union、union all
	2、常量视图
	3、select中包含子查询
	4、join（连接  92 用，）
	5、from 一个不能更新的视图
	6、where子句的子查询引用了from子句中的表（from、where用了同一个表）
	
视图和表的对比：
		     关键字		是否占用物理空间		使用功能
	视图	     view		 占用一小部分（保存逻辑）         增删改查，一般只能查
	表	     table		  占用				增删改查

	 
	 
	 示例:
	 create or replace view myview as select empno,ename from emp
	 视图可以增改改查,但是一般只用来查看,通常视图创建的时候加上条件 with read only,而且具备上面特点的不可更新
	 
	 同义词:synonym  可以给一个表取另外一个名字
	 create synonym 同义词名字 for 表名;
**********************************************************************************
序列:生成类似于 auto_increment这种ID自动增长的
	 
	 语法: 
	   create sequence 序列的名称
	   start with 从即开始   (最开始第一次循环开始的地方)
	   increment by 每次增长
	   maxvalue 最大值 |nomaxvalue
	   minvalue  最小值| nominvalue    (最小值是当第一次循环结束后开始的地方)
	   cycle|nocycle 是否循环 假如达到最大值后是否开始循环 又从最小的开始
	   cache 缓存的数量  这是指提前在序列中创建好指定数量的数字以供使用
	   
	   例子:
	   创建一个1,3,5,7...30的序列
	   create sequence seq_test1
	   start 1
	   increment by 2
	   maxvalue 30
	   cycle
           cache 10;
	   
	   如何获取序列的值:
	   序列名.currval :当前值
	   序列名.nextval:下一个值
	   
	   注意:currval需要首次调用一次nextval()之后才能使用   因为最开始指向的第一个之前
	        还需要注意的是调用一个nextval  指向序列中的指针就会变动
	   
	   序列最常用的写法:
	   create sequence 序列名;  默认从1开始 每次增长1 没有最大值 不循环 默认没有缓存
	   序列可以用于给一个我们希望自动增长的列赋值  使用序列名.nextval 进行值得插入
	   比如 insert into stu(stu id,stuname) values(序列.nextval,'龙哥');
**********************************************************************************	   
 索引:相当于一本书的目录,可以提高查询效率	   
      我们可以对那种频繁使用的列上创建索引,那么创建之后我们再去查询的时候效率就比较高
      但是适用于数据量大的数据库,数据不多的话没必要
      语法:create index 索引名 on 表(列1,列2....)   多列的话就是复合索引   单列就是单列索引
      注意:主键约束自带主键索引 唯一约束自带唯一索引
      
						  ********Oracle中SQl拼接字符串使用||**************
						  比如 inser into table1 values('姓名'||'i','地址'||'i')
						  这里将字符串拼接了一个字符串i,在PLSQL也可以拼接变量
  
    	 
  我们在进行查询的时候,select是最后的投影,这个不是关键
  关键是where子句中 根据什么样的条件查询的
  如果我们根据某一列来查询比如  name="xxx"  那么我们可以在这一列上加上单列索引create index 索引名 on 表(列1)
  如果条件是多列的  那么我们需要添加复合索引create index 索引名 on 表(列1,列2....)
   **关键点**
   因此我们建立索引是根据where子句中频繁使用的列来建立索引的,频繁使用单列就创建单列索引, 频繁是使用的多列创建复合索引
	 
	 
 索引的原理:为什么添加索引可以加快查询速度
 	1btree
	2平衡二叉树
		
  
  如果是没有创建索引的情况下,我们需要一行行的查询,然后从每一行的数据取出条件列的数据来检查是否满足条件
  
  而建立了索引之后,那么会将索引所在列单独拿出来建立一个树  然后我们查询的时候是先去查询这个树
  比如将name列排序后形成一个平衡二叉树,然后二分查找name="龙哥",找到之后再根据指针找到name="龙哥"所属行
 
  索引也有缺点:当我们更改表的时候,也需要去更新索引
 *************************************************************************************
 PLSQL编程: procedure language 过程语言
  让我们能够像再java中一样写if else  仅仅在PLSQL中
  
  	declare
  	 ----声明变量
 变量名 变量类型;
 变量名  变量类型:=初始值;
 变量名  表名.列名%type;  引用型变量 用这个方式可以申明一个类型和xx表名.列名同类型的变量  用来装单个查询数据的  通过(select 列名 into 变量 )来装取
 变量名  表名%rowtype;   申明记录型变量 用来装1行中所有查询数据
	   --逻辑
	 end;
 
 
 
 declare 
 	i varchar2(10):='张三';
 begin
 	bdms_output.put_line(i);
 end;
 **************************************************************
 PLSQL的作用是用来在Oracle更方便得编写SQL语句以及封装函数以供java直接调用
 *************************************************************8
 条件判断
 	 if then 
	 elsif then
	 else 
	 end if;
 
 循环操作:
  while循环:    while循环的循环变量需要在declare中定义

	  while 条件 loop
	  循环体
	  需要添加自增条件 i :=i+1; 在PLSQL中赋值符号是:=
	  end loop;
  
  for循环:
  
	  for 变量名 in [reverse]起始值..结束值 loop  (for循环的循环变量不需要定义  reverse可以用于循环变量倒序取值)
	  循环体
	  end loop;

  
  
  
  loop循环:
	 loop
	  exit when 条件;  设置退出条件   循环变量要提前申明(可以位于loop 和 end loop的任意位置)
	  循环体 
	  end lop;
	 PLsql输出菱形:
	  begin
   
    for i in 1..3 loop
        for j in 1..(3-i) loop
            dbms_output.put(' ');
        end loop;
        for j in 1..(2*i-1) loop
            dbms_output.put('*');
        end loop;
            dbms_output.put_line('');
    end loop;
     for i in reverse 1..2 loop
        for j in 1..(3-i) loop
            dbms_output.put(' ');
        end loop;
        for j in 1..(2*i-1) loop
            dbms_output.put('*');
        end loop;
            dbms_output.put_line('');
    end loop;   
 end;
 
 
 
  java中输出菱形: (这个思路也使用于PLSQL)
    传统方法是两层循环,内层循环打印*和空格的次数根据外层的层数而定,也就是j和i有关,还和层数n有关
    但是有个简单的方法,将菱形看成一个n*n的二维数组,因为打印的这个菱形本身就是一个正方体
    然后根据abs(i)+abs(j)<n/2   也就是线性规划|x|+|y|<=m  表示在菱形内部  >2表示在外面  通过这种方式判断二维数组的每个元素该怎么打印
    但是这里并不是说二位数组的下标从-n开始 ,而是循环的初始值从-n开始到n
    
    n层的菱形 应该从-n/2到n/2  
    
  	public void  demo1(){
		int input;
		Scanner sc=new Scanner(System.in);
		System.out.println("输入菱形的层数:");
		input = sc.nextInt();
		int n = input/2;
		for(int i = -n;i<=n;i++){
			for(int j=-n;j<=n;j++){
				if(Math.abs(i)+Math.abs(j)<=n){
					System.out.print("*");
				}else{
					
					System.out.print(" ");
				}
			}
			System.out.println("");
		}
	}
 
 ********************************************************************************************
 游标:
    是用来操作查询结果集得,相当于jdbc中得ResultSet
    定义:游标是系统为用户开启得一个临时数据缓冲区,用于存放sql语句集,用户可以用过用表逐一读取数据记录,然后赋值
    给变量 比如PLSQL中得引用行变量 或者记录变量
    
    为什么需要游标?
    由于主语言是面向单值得,我们每次只能读取一行数据 然后赋值给变量 再交由主程序使用 然后一个SQL语句产生得结果
    可能是多行数据,那么此时因该为这个结果集开启一个游标,通过游标读取数据赋值给记录型变量  vrow  %rowtype
    
    如果结果集只有一行得话 我们可以通过select 列名 into 引用型变量完成  或者select *  into 记录型变量 
    但是如果是多行的话,要在函数或者存储过程中读取sql结果集必须开启游标
    
    
    语法:cursor 游标名 is 查询结果集
    步骤:
    1声明游标  cursor 游标名(参数名 参数类型) is 查询结果集(子查询结果)
    2打开游标  open   游标名
    3从游标中取数据  fetch 游标名 into 变量  fetch相当于next  读取下一行记录 因为一开始处于第一行之前
    		游标名%found   当前行数据存在时返回true     这个适用于while循环
		游标名%notfound  当前行数据不存在时返回true   这个适用于loop循环
		这两个可以又来判断游标是否
    4关闭游标  close 游标名
 	 
	 
	 例子:
从emp表中输出所有员工的姓名和工资,在PLSQL中输出,不是通过select
	declare
	      cursor vrows is select * from emp;    声明游标
	      vrow emp%rowtype;     声明记录型变量装取数据
	begin
	open vrows;
	 loop    循环读取游标中的数据
	  fetch vrows into vrow;
	  exit  when  vrows%notfound;
	  dbms_output.put(vrow.name||vrow.empno);
	  end loop;
	  close vrows;	
	end;

带参游标的声明:
	cursor 游标名(参数名 类型) is 结果集(结果集中需要用到这个参数)
        因为可能有时候结果集不定,所以此时游标可以带上参数
        我们打开游标的时候就可以赋上参数,这样就不必写死了
        比如: open vrows(5);
	根据传入的参数生成相应的结果集,然后开启游标
	也就是说参数实际上供给结果集使用的
	
示例:输出指定部门的员工的名字和工资   由于部门不定,所以结果集也不定,需要游标传递参数,参数和查询时的类型要一致
定义游标的时候需要定义参数,供结果集使用

	declare
		  cursor vrows(arg number) is select * from emp where deptno=arg;    
		  vrow emp%rowtype;     
	begin
	open vrows(10);
		  loop    循环读取游标中的数据
		  fetch vrows into vrow;
		  exit  when  vrows%notfound;
		  dbms_output.put(vrow.name||vrow.empno);
		  end loop;
		  close vrows;	
	end;
	
	
	
系统引用游标:Oracle 提供的一种类型 sys_refersor    
	直接通过声明游标:   游标名 sys_refersor;  这样就声明了一个游标 ,只不过没有结果集,它是空的
	打开系统游标:  open 游标名 for 结果集;

	其他取数据,关闭都是一样的;
	
	
使用for循环遍历游标:(一中简单的方式)
declare
	 cursor vrows is select * from emp;    声明游标
 begin
 
 	for vorw in vrows loop
	
	
	end lopp;
 end;     使用for循环遍历的话我们不必手动打开、关闭以及取数据了,Oracle底层帮我们完成了这些操作
	   而且使用for循环我们也不需要声明一个变量去装数据,oracle 我们完成了    
	       
	       
游标的应用:通过游标读取结果集,然后根据数据做if判断,然后可以编写sql语句去改变真实的表,虽然我们不能改变游标里面的缓冲数据
但是可以使用sql语句去改变真实表中的数据


PLSQL中的异常(例外):
declare
	
begin

exception
when 异常1 then
when 异常2 then

when others then   当我们不区分异常的时候 直接写 when  others  then 执行语句
end;
  这里指方发生异常后,就执行exception中的语句
  zero_divide  除0异常
  value_error  类型转换
  too_many_rows: 查询出多行记录 但是赋值给了rowtype类型的变量 或者%type
  no_data_found:没有查到数据但是却赋值给了一个变量
                    单行数据赋值通过的是 select * into 变量 而不是:=号  这个要记住
  		     多好数据是通过打开游标  然后fetch 游标名 into 变量; 通过这个sql语句从有游标取出一行数据
		  单行数据赋值:   
		  row emp%rowtype; 
		  select * into row from emp where empno=xxxx;
		  单属性赋值:
		  vsal emp.sal%type;
		  select sal into vsal from emp where empno=xxx;
		  多行:
		  cursor rows is select * from emp;
		  open rows;
		  fetch rows into row;  这里可以循环从游标取值 通过 rows%found  或者rows%notfound判断
		  close row;
		  
自定义异常:
异常名 exception;
raise 异常名;  在我们希望的地方抛出异常,抛出异常后我们就可以在 exception-end之间的语句体之间捕获异常

declare 
	vrow emp%rowtype;
	no_emp exception;
begin
	select * into vrow fron emp where empno="8888"	 //其实这里就抛出了一个系统的异常  no_data_found的异常 并不能走到我们的自定义异常
	if vrow.sal is null then 
	 raise no_emp;          我们这里判断是否获得员工是不是空的,如果是空的就抛出异常,然后就可以在下面捕获异常
	 end if;
excpetion
	when no_emp then
	 dbms_output.put_line('输出了我们自定义的异常');
end
		  
  如何绕过系统异常而抛出我们的异常呢?
  通过游标!!!  我们可以将查询的结果开启游标 然后使用  游标%found  或者游标%notfound
declare
vrow emp%rowtype;
  cursor vrows is select * from emp where empno='88898' ;
  no_emp exception;
begin
   open vrows;
   fetch vrows into vrow; 移动光标到第一行(fetch用来移动光标到下一行并且取出数据,数据不存在的时候也不会出错)  
  if vrows%notfound then    判断数据是否存在    当光标位于初始位置(第一行之前)的时候, 游标%notfound默认是 false的 也就是说默认情况是存在数据的 这个要清楚
   raise no_emp;  
  end if;  
   close vrows;
exception
   when no_emp then
   dbms_output.put_line('没有找到员工,输出了我们自定义的异常');
end;
  
    

*************************************************************************
关于Oracle中游标注意的点:
 fecth是将光标移到一下行并且取出下一行的值 然后赋值给变量,如果下一行的值不存在,赋值给变量不会报异常,变量的值仍然是之前的值
 fetch的功能有两个  一是移动光标到下一行 而是取下一行的值赋值给变量
 只有这种情况会报no_data_found的异常 :从select中查询值 然后赋值into给变量,若结果为空,会异常
 
 
 游标%notfouund 游标%found 是判断的游标当前行是否存在值
 如果当前是起始行(第一行之前)  游标%found默认是true的  游标%notfouund默认是false的
 *******************************************************************
存储过程:
  封装好了的SQL语句,并且是已经编译了的代码
    1执行效率高,因为已经编译好了,不需要再调用的时候编译
    Oracle 中定义存储过程中的语法:
    
    create[or reolace] procedure 存储过程的名称(参数名 in|out 参数类型)
    is | as
    	 声明部分;
    begin
    
    end;
    
    in out指的是 这个参数是输入参数还是输出参数 
    输入参数是我们要传进去得值
    输出参数相当于在外面创建然后传入的一个用来装函数需要返回值得变量   简单点来将输出参数是用来装我们想要返回的值
    在java中相当于我们创建一个变量通过赋值的方式来获得函数的返回值
    而存储过程则是在调用的时候传入输出参数在存储过程内部来获得返回值
    
    
    实例:创建一个获得根据编号获得年薪的存储过程
    create or replace procedure pro_getsal (vempno  in number,vtotalsal out number)
    is
    
    begin
    	select sal*12+nvl(comm,0) into vtotalsal from emp where empno=vempno;
    
    end;
    
    当我们定义完存储过程后,点击执行,该存储过程就会保存到oracle数据库的当前用户下
 oracle中调用存储过程:
  方式1: call  存储过程名字;   通用
  方式2: 在PLSQL的语句体中可以直接调用存储过程名字,不需要使用call;
*******************************************************************
    存储函数:同样也是经过封装的sql语句,也经过了预编译
    创建语法:
	 create[or reolace] procedure 函数的名称(参数名 in|out 参数类型.....) retuen 参数类型
	    is | as
		 声明部分;
	    begin

	    end;
   create or replace function pro_getsal (vempno  in number,vtotalsal out number) retuen number
    is
     vtotalsal number;
    begin
    	select sal*12+nvl(comm,0) into vtotalsal from emp where empno=vempno;
    	retuen number;
    end;		    
	    
 这里可以看出函数与java中没区别,通过return返回值,在函数内部定义变量,返回这个变量
 存储过程如果需要返回值的话是通过传入输出参数,在存储过程内部对这个输出参数赋值实现返回值的
	    
  存储过程和函数的区别:
  1他们本质没有区别
  2函数存在的意义是给过程使用的
  3函数返回值或者表对象,因此可以作为子查询或者from字句后面,而存储过程一般是单独调用,比如在java中调用
  4函数可以在sql语句中直接调用  
  注意在Oracle中计算不出一个null值+任意类型的值 所以在加的时候一定要注意使用nvl()函数去判断null值
*******************************************************************
java中如何调用存储过程?  就是jdbc那一套
1导入驱动
2注册驱动
3获取连接
4获取执行sql的statement
5封装参数
6执行sql


在java中连接Oracle的相关设置
驱动名:oracle.jdbc.drive.OracleDriver  对比  mysql的驱动名 com.mysql.jdbc.Driver
url: jdbc:oracle:thin@ip地址或者localhost:1521:orcl; oracle 中只有一个数据库实例 orcl
用户名:
密码:  
oracle登录的是orcl数据库中的不同用户
mysql连的是一个用户下的不同数据库
	       
*注册驱动
Class.forName("oracle.jdbc.driver.OracleDriver"); // DriverManger.registerDriver();
conn= DriverManger.getConnection(参数1,参数2,参数3); url  用户  密码
conn.preparestatement()  返回执行sql语句的对象
conn.preparestatement()   返回执行存储过程的对象

conn.preparecall();返回一个callablestatement对象  用于执行sql存储过程的接口,通过preparecall()获得对象
这里的prepacecall和prepacestatment()一样,都是为了防止sql注入预先预先给statement定义一个sql语句 关键地方用?代替
然后通过statement对象给参数赋值然后执行

*比如conn.preparestatment("select * from emp where empno=?");	
通过statment.set(1,...);给预定义的sql语句中的问号?赋值  这样就起到了防止sql注入的目的

conn.preparecall(arg)  参数arg是一个字符串  
字符串格式:  "{call 存储过程名字(?,?,?.....)}"  ,问号用于代替参数,如果参数固定可以不用问号,问号方便之后通过set赋值 ,防止sql植入
对于存储过程参数有in和out的区别
in参数使用set系列方法赋值  
out参数则必须注册且在语句中必须用?代替,在执行完存储过程后可以通过get取出这个值 
注册之后jdbc会创建一个变量传入存储过程
注册方式: 调用方法  state.registerOutParameter(参数索引,参数类型);  OracleTypes.xxx

执行:state.execute();

获取out参数的值
state.getxx(out参数的索引);  这里相当于得到 jdbc自己创建的那个输出参数的值
*****************************************************
jdbc调用存储函数
Class.forName("oracle.jdbc.driver.OracleDriver"); // DriverManger.registerDriver();
conn= DriverManger.getConnection(参数1,参数2,参数3); url  用户  密码
statement = conn.preparecall(arg);
调用存储函数的字符串格式
arg="{?=call 函数名(?)}"  这里多了一个?=   代表返回值
这里的第一个问号代表的是返回值

函数返回值和存储过程的输出参数一样需要注册,然后再执行完后通过get得到
statement.registerOutParameter(1,返回值类型);   注册返回值
statemetn.set(xx,xxx)  给函数的in参数赋值
statemetn.execute();
statement.getxxx(返回值所在问号索引);

************************************************************
触发器:当用户执行了 insert|update|delete这些操作之后,执行的一系列操作

      创建语法: create [or replace] triger 触发器名称
       before | after
       insert|update|delete
       on 表名
       [for each row]  是否对每一行数据执行触发器
	declare
	
	begin
	
	end;
当我们定义完触发器后,点击执行,该触发器就会保存到oracle数据库的当前用户下

触发器分类:

语句级触发器:  不管影响多少行,都只会执行一次
在语句级触发器中不能使用:new 和:old  因为影响多行 但是只执行一次  

行级触发器:影响多少行,就触发多少次
 当我们加了for each row后 就是行级触发器  触发触发器的语句影响了表多少行就执行多少次触发器语句
 由于行级触发器是被影响的每一行都会执行触发器,因此行级触发器的语句体中可以使用 :old 和:new
  :old 得到更新前的那一行数据   :old.属性名
  :new 得到更新后的那一行数据  :new.属性名

想要拿到被影响行数据就要加 for each row


*********************************
使用触发器模拟MYsql中的id自动增长:
在mysql中我们对于自动增长的列可以使用 insert into table valuse(null,),在定义了自动增长的情况下可以使用null值,
在Oracle中这样写可以嵌入null值,但是不能自动增长,前提是该列允许为空,如果定义了非空 使用null会报错

那么我们要怎么才能实现这样一个功能并且不报错呢?
那就是触发器,我们编写一个触发器在插入之前 执行  然后使用 :new.属性 给需要自动增长的属性列赋值即可  从序列取值
create table stu(
	sno number not null,
	sname vachar2(10)
);
create sequece id_seq;

create  trigger tri_stuid 
before insert
on stu
for each row
declare
begin
select  id_seq.nextval into :new.sno from dual;   或者这种方式   :new.sno :=id_seq02.nextval ;      前面一直是通过select into的方式赋值,需要一个虚表dual,后面是直接赋值
end;

这里是定义触发器,然后在插入之前执行触发器, 使用:new.sno引用被影响行sno属性的值,然后给它赋值序列中的下一个值 

对于插入操作而言是没有 :old值的 对于删除操作是没有:new值的
只有更新要同时有:old 和:new

还有要注意的是 :old 和:new不只是引用表的行值, 我们通过它们可以直接更改表中该行的数据,所以才能通过:new.属性 来实现自动增长

为什么对于非空的列我们插入null不会报错呢?
因为我们定义触发器在插入之前操作,然后通过:new给插入之后的该行属性赋值了 所以当插入时该属性已经不是空值了
这里可以理解为 通过:new.属性 改变了我们插入语句中对应属性的值,然后在后面的插入操作就不会报错且能够实现id的自动增长
为什么不在插入之后执行触发器呢?因为执行插入之后监测为null就会报错,根本就不会执行触发器


注意:*******************************************************
 :new. 只能改变before 类型的触发器,也就是说:new引用即将改变的值 ,在执行sql语句之前更改  ,然后再执行sql语句,其实:new改变的是sql语句中 相应列的值
 :old  只能改变before类型的触发器


