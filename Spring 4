1下载Spring的压缩整合文件
doc文件夹:Spring的相关文档
libs:Spring的相关jar包
schema:SPring XML文档的相关约束

2Spring引包
Ⅰ IOC的四个核心容器:beans  context core  SPEL(expression)
Ⅱ spring开发也需要日志的jar包 log4j  以及commons.logs jar包 
Ⅲcommons.logs这个jar里面都是一些日志接口  具体的实现可以是log4j也可以是jdk自带的日志实现
Ⅳ使用log4j需要再classpath目录下配置log4j属性文件以及引入log4j的jar包

3Spring解决了什么
  Spring使得类和类之间的耦合变低,通过IOC使得底层的实现不改变上层的代码 
  通过工厂+反射+xml配置 将类的管理权限(生成类的权力)交给SPring的beans容器  (factory)
  
  在src目录下创建applicationContext.xml(beans.xml) 文件  引入schema约束  
  约束规范可以在Spring压缩包下C:\Users\MECHREVO\Desktop\API\spring-framework-4.2.4.RELEASE\docs\spring-framework-reference\html\xsd...下去复制
  
  The beans schema
  <?xml version="1.0" encoding="UTF-8"?>
  <beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="foo" class="x.y.Foo">
        <meta key="cacheName" value="foo"/>
        <property name="name" value="Rick"/>
    </bean>  这里的bean就是我们委托给spring管理的类

</beans>

   Spring通过bean创建类实例的流程:
   applicationContext ac= new classpathxmlapplicationContext("" beans xml文件的位置); 由于放在src下  所以直接是xml的文件名
   object x=  ac.getBean(id);通过xml中相应bean的id去找到这个类 然后通过反射获得实例
   
   因此当我们需要改变底层的类的时候只需要去xml中改变相应配置即可 而不需要改动代码 也就实现了底层的改变不影响上层 实现了控制反转
 
4Spring的DI
  DI依赖注入  spring可以将实现类中所依赖的属性注入进来 可以通过接口来获得这个属性值
  
 一般来说 面向接口变成 我们使用接口有一个问题,那就是不能使用实现类中特有的方法和属性 
 但是通过DI将类交给spring管理后,就算我们使用接口编程,也能使用实现类中特有的属性(独特的成员变量)
 <property name="name" value="Rick"/>  通过在beans中的bean标签中设置property标签即可
 
 这个标签中的name的值要和实现类中的成员变量命一一对应
 
 5Spring的工厂类(接口)
 Beanfactory (旧)
 applicationContext(新的)  有两个实现类
 classpathxmlapplicationContext  加载在类路径下的beans.xml
 filesystemxmlapplicatoncontext  加载在磁盘上的beans.xml
 
 
 5 Spring的xml提示问题
  在hibernate中我们使用的外部dtd文件引入或者 在线的联网的dtd形式约束
  一个xml只能被一个dtd约束
  
  在spring中使用xsd 也就是xml schame  一个xml可以被多个schema约束
  外部引入schema的话 还是去找相应xml的约束 然后eclipse的引用中搜索xml catlog
  然后引入外部约束 下面的网址填写相对应的地址 (比如上面xml中的xsi:schemaLocation的地址 这个是在线地址)
  当没有联网时,在线地址不可用,则会使用相应的外部文件
  
  6<bean>标签管理类 
    属性 id 和name的区别  这里都是对类的名字进行标志  id不允许重复 并且不能有特殊字符
                                                     name允许重复 但是实际开发也不允许 但是可以有特殊字符
     
    init-method属性 可以设置初始化方法
    destroy-method属性可以设置bean的销毁方法  当我们在xml中配置了这两个属性
    那么就可以在对应的类中编写相应的方法  当bean被创建的时候会去自动调用初始化方法
    当beans工厂关闭的时候会销毁bean 通过applicationContext.close()关闭工厂
    
    
    7 bean 的作用范围的配置(scope属性)
    singleton:默认的  spring的单例模式 无论创建多少次bean都是同一个对象
    prototype:多例模式
    request:应用在web中,当spring创建这个类实例后会将它存入request范围中
    session:应用在web中,.....................,存入session中
    globalsession:应用在web项目中,在porlet环境中使用,这种环境是指比如我们登录一个公司的某个产品比如百度网盘,那么我们登录其他的产品的时候免登录,这种情况
    
    
  8Spring中的属性注入方式 DI   怎么给bean 的属性赋值 因为我们只能同构getbean得到实例,那么bean中的局部变量值怎么设置呢?
  
    Ⅰ通过构造方法 在bean的类中提供一个构造方法
      bean交给spring管理 并且设置子标签<constructor-arg name=""  value="">
      通过这个标签可以给构造器参数赋值 spring调用构造器生成实例的时候会给相应属性赋值
    
     Ⅱ通过set方法  在bean的类中设置一个set方法
     bean交给spring管理 并且设置子标签<propery name="" value="">
     
     
     注意如果局部变量是一个对象 那么不能用value在设置值了,应该用ref属性 <propery name="" ref="">  
     ref="某个bean 的id"  spring通过beanid获得类实例然后赋值给局部变量 ref引用某个bean 的id获得实例
     
     Ⅲ接口注入(spring不支持)  接口注入是指让类来实现一个可以提供属性设置抽象方法的接口
     
     Ⅳp名称空间的属性注入
      通过引入P名称空间的方式来进行属性注入
      怎么引入?
      xmlns:p="http://www.springframework.org/schema/p "  引入这个名称空间  放在beans标签中
      
      写法:
     普通属性注入  P:属性名="value"
     对象类型注入  P:属性名-ref="value"
     <bean id="employed" class="xxx" p:name=xxx  p:xxx=... 或者p:xxx-ref=xxx>
     这里的属性名就是类中的私用局部变量名字 也是set方法的参数名字
     需要注意的是P名称空间引入这种方法只适用于beans中有set方法的属性注入  如果是构造方法类型的则不行
     
     Ⅵspel方式的属性注入
     同样是对set方式属性注入的一种扩展  在我们写value="xxx" 这里可以写spel表达式  #{xxx}
     name="" value="#{'张三'}"  字符串
     name="" value="#{2000}"   整型
     name="price" value="#{car1.price}"  对象属性(私有变量可以直接引用 ,仅限于spel中)
     name="price" value="#{car1}"   对象值 这里是bean 的id
    注意: 在spel中 通过类id.属性名 可以获得私用的局部变量  但其实调用的是get方法得到的这个属性值
     比如car.prices 其实调用的是car.getprice(); 因此需要保证bean对应的类中有get方法
     
     
     Ⅶ复杂类型的属性注入 数组或者list集合 
     <bean id="" class=""  >
     <property name="arr">
     <list>
      <value></value>  如果数组或list里面存的是对象  那么  使用<ref>标签
     </list>
     </property>
     </bean>
     
     如果是set集合
       <bean id="" class=""  >
     <property name="arr">
     <set>
      <value></value>  如果数组或list里面存的是对象  那么  使用<ref>标签
     </set>
     </property>
     </bean>
     
     如果是map类型
       <bean id="" class=""  >
     <property name="arr">
     <map>
      <entry key="" value(或者value-ref)="">  </entry>  如果数组或list里面存的是对象  那么  使用<ref>标签
       <entry>  </entry>
        <entry>  </entry>
     </map>
     </property>
     </bean>
     
     
     
     7Spring分模块开发
       在引入beans配置文件的时候可以使用 classpathxmlapplicationContext()可以引入多个beans文件
       
     8属性注入的用法
     本意使用来注入类中一些局部变量
     
      但是我们在一个类中要使用另一个类, 简单明了的方法是将这个类交给Spring管理 然后通过applicationContext来获得对象
      还有就是通过属性注入,在这个类中设置我们要使用的类的接口局部变量,然后通过属性注入,使得主类能够获得这个类得对象
      并且可以通过xml配置随时改变这个类 而主类只管使用这个对象 而不必管这个类怎么改变
     
     
     
     
     
     9关于工厂类的创建
     由于每次访问web项目都会创建一次工厂,这极大的浪费了资源,因此需要在服务器启动的时候创建一个工厂类 然后存放进唯一的对象 servletcontext对象
     servletContext对象是web项目中唯一对象,所有serlvet http都只能访问同一个
     
     所以带来了一个解决方案
     引入spring-webjar包
     在web-xml中配置Spring 的核心监听器  这个监听器的作用是当项目在服务器上启动的时候 读取bean配置文件 创建唯一的工厂applicationContext存入setvletContext中
     
     <listener>
  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
     </listener>    监听器是ContextLoaderListner的全路径名字
  
    <context-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:applicationContext.xml</param-value>
    </context-param>   这里是指定beanxml的路径   前缀classpath指的是类路径 src下的相对路径

     然后通过WebApplicationContextUtils.getWebApplicationContext(this.getServletContext()); 获取唯一的工厂对象(beans工厂) 
     
     
     
     10Spring IOC的注解开发
      第一步  引入相应的jar包 需要多一个AOP的包
       
       第二步  引入Spring的核心配置文件 就是beans.xml  
       引入约束  使用注解开发需要context schema (context里包括了beans的约束)
       
       第三步
        使用IOC的注解开发需要在beansxml中配置一个组件扫描 (哪些包下的类要使用注解开发) 所以这个xml并不是用来配置bean的
      <context:component-scan base-package= " 包名">  配置包名
      
      第四步 
       在类上添加注解@Component(value="") 这里相当于将这个类托管给Spring的IOC容器 相当于<bean>中的操作
       然后其他和非注解方式类似  通过加载beans.xml获得工厂对象  然后通过工厂获得实例
       
       这里value=""是给beans设置id
       
       11注解方式怎么设置属性注入呢?
       
       注解方式设置属性值可以没有set方法
       
       如果属性有set方法,那么需要将属性注入的注解添加到set方法
       如果属性没有set方法,那么需要将属性注入的注解添加到属性上
       
       这个注解是@value("值")
       比如  
       
      @value("龙哥")
      private String name;
     
      12SpringIOC中的注解
      
      Ⅰ@Component :组件
      
        修饰一个类,将这个类交给SpringIOC容器管理
        三个衍生注解:
             1@Controller  修饰web类
             2@service     修饰service类
             3@Respository   修饰Dao类
     
       Ⅱ属性注入注解
         普通属性:
              @value("")
         对象类型:
              @autowired  没有参数  按照对象类型直接注入
              
              @autowired
              private UserDao userDao; 
              也就是说只要是userDao的实现类的SPring都可以将他们的实例注入到这个引用  这样就不能按照名称注入 ,因为有些时候我们希望能够注入指定的Beans
              
              所以
                @autowired
                @Qualifier(value="对象的名称id")
                
                这两个合着一起用,强制注入指定名称的类实例
            @Resource(name="名称id "):可以完成对象类型的属性注入
         
         Ⅲbeans中方法上的注解  
           当beans初始化的时候执行的方法注解
           
           @PostConstruct
           加载beans类中的某个方法上,当beans被创建的时候 执行该方法
           @prDestroy
           加载beans类中的某个方法上,当beans被销毁的时候 执行该方法
           
           Ⅳbean作用范围的注解  加在类上
           @scope  默认值为singleton    无论用getbean多少次得到的始终是同一个对象
           @scope("prototype")        多例 beans被创建时会创建不同的对象
                
      
     
       <context:Component-scan>这个标签是用来扫描类上的注解 如果没有@component注解那么可以不需要这个标签
       但是如果使用了属性上的注解 那么需要添加<context:annotation-config/>标签
     
     
     
     11AOP原理  Aspect oriented programming
      面向切面编程   oop面向对象  
     
       AOP底层就是动态代理,相当于将所有模块的共性抽取出来开,然后我们需要使用这个功能就
       使用AOP动态代理增强我们当前的模块,不需要使用就不使用动态代理
     
       Spring底层动态代理实现了两种:
       JDK动态代理   只能对实现了接口的类产生代理
       proxy.newproxyInstance()
       
       Cglib动态代理  可以对没有实现接口的类产生代理,其实就是生成子类对象,所以不要使用fianl修饰
        Enhancer enhancer = new enhancer();
        enhancer.setSuperClass(我们要代理的对象); 设置父类
        enhancer.setCallbank(Methodinterceptor);设置回调函数  类似于invocationhandeler  要去实现一个methodinterceptor接口  然后传入这个实现类对象
        enhancer.create();产生代理对象
        我们不需要自己创建代理对象,只需要在Spring中进行配置 
       
        区别   jdk产生的代理对象proxy可以看成是接口,里面只有方法规范没有具体定义, 具体的操作没有
               cglib产生的代理对象是一个子类  里面什么包括父类的一切 有方法具体的定义 
               
               
     12Spring的AOP开发
     
     AspectJ(aop框架)
     
     joinpoint:连接点  可以被拦截到的点
     Pointcut:切入点,真正被拦截到的点(可以是一个或多个方法)
     advice:通知,增强,用来增加切入点的方法
     target:被增强的对象
     weaving:将通知应用到target的过程 
     
     aop是一个动态的过程,对需要增强的对象方法才增强,不需要增强则不管它
     
     第一步
     需要引入AOP相关的包以及aspectJ的包
     在Spring核心包的基础上  需要引入AOPalliance(统一的规范)  第三方ASpectj包  Spring自带的整合aspect包 以及aop包(Spring自身对于aop的实现 相当麻烦)
     
     第二步 引入Spring核心配置文件的约束  AOP约束  前面学过要用注解需要引入context约束  (schema约束文件时xsd后缀)
     可以在配置文件中配置多种约束  注意:没有网的话需要引入外部schame文件  在xml catlog中
     
     第三步:
     创建切面类(包含通知方法advice  就是增强用的方法) 增强切入点  
     配置切面类: 交给spring管理(切面类需要进行beans配置或者@Component注解 添加context-scan扫描)     定义了一个切面类之后需要: 配置为beans(交给spring)+配置为aspect切面
     通过AOP配置完成对目标类(被增强的类)产生代理 应该说是对类中方法的增强  对类产生代理 然后增强里面的特定方法
     <aop:config>
     <aop:pointcut expression="excution(*报名.类名.方法名(..))"  id="切入点的id"/>  这里确定了要增强的方法    ..代表任意参数  *代表任意返回值
          这个expression是切入点表达式  表示这个切入点要具体到那些方法上
     <aop:aspect ref="...切面类的id">  这个标签要在pointcut后面
        <aop:before method="切面类里的某个方法名字 " pointcut-ref="切入点的id">   这里的before是指前置增强 当然也有after后置增强 
     </aop:aspect>
     </aop:config>
     
     14SSpringAOP中通知类型 通知就是用以增强的方法
      1前置通知  <aop:before method>  在目标方法执行之前通知
          任意通知都可以获得切入点信息,只需要在通知(增强方法)中添加参数,JoinPoint joinpoint  这个类是aspectj提供的类
          用以在增强方法中获得切入点的具体信息 直接用即可 Spring底层会将具体对象传入增强方法中 前提是该参数类型和名字不能写错
      
      2后置通知  <aop:afer-retuening> 再被增强方法执行之后通知
       后置通知可以获得被增强方法的返回值 通过设置一个通知的参数object xxx  参数的名字必须和配置中一致参能得到返回值
       <aop:after-returning method="" pointcut-ref="" returning="xxx"> returning指定接收返回值的参数名字
       
      3环绕通知  在目标执行之前和之后进行操作
        环绕通知可以阻止目标方法的执行
        <aop:around method=..>  
        环绕通知和前置后置不一样在于,环绕通知需要我们自己在通知中执行切入点方法 ,通过参数Proceedjoinpoint joinpoint
          通过方法joinPoint.proceed()来执行切入点方法,如果没有这个则会阻塞
      其次 前置通知后后置通知则有Spring帮忙执行一次切入点方法    
          环绕通知
          public object around(ProceedJoinPoint joinpoint){
             环绕前通知....
             Object obj= joinPoint.proceed()
             环绕后通知.....
             return obj;
          }
          
          
        
        
      4异常抛出通知:在程序出现异常的时候经行通知
     <aop:-throw method="" pointcut-re"" throw="" 配置获取获取异常的通知参数>  
     
     ******************
     AOP切入点表达式语法:
     语法:[访问修饰符] 方法返回值 包名.类名.方法名(参数)
     expression=excution()
     public void com.study.customer.save(..)  ..表示参数不限
     * com.void com.study.customer.save(..)   *表示返回值也不限制
     * *.*.*Dao.save()表示所有类下的Dao类下的save方法都能被增强
     
     
     
     13Spring整合junit4单元测试
     通常我们在测试Spring的beans类的时候,需要@test 并且创建工厂类获得beans来测试
     由于我们的测试类不被Spring管理,因此不能注入beans类测试
     所以SPring提供了test.jar包 整合junit
     
     在测试类上添加注解@Runwith(SoringJunit4ClassRunner.class) 这个注解表明该类在单元测试类中的运行期中运行
       @ContextConfiguration("classpath:beansxml路径")  这一注解用于加载Spring的配置文件,因此不需要创建工厂类来加载xml了
       我们要使用beans的类只需要进行属性注入即可,由于注解的存在 不需要将测试类加入Spring管理
       也可以理解为这个注解使得该类被Spring管理
       
       注意 在Spring中用注解属性注入一个类的前提是该类Spring管理,获得添加了@Component注解
       
      比如
      
      @Runwith(Springhunit4classrunner.class)
      @ContextConfiguration("classpath:applicationcontext.xml")
      public class SpringDemo{
        @Resource(name="userDao")
        private UserDao userDao;
       
        @Test
        public void demo1(){
          可以直接使用userdao 而不需要每个方法都建工厂去得到这个bean
        }
      
      
      }
     
      使用Spring整合junit需要test.jar包
     
     
     14AOP的注解开发
      **********************************************************************************
     使用注解开发需要在spring配置文件中开启aop注释自动代理。如：<aop:aspectj-autoproxy/>
     
     spring中Aop的注解
     @Pointcut注释声明一个切点目的是为了告诉切面，谁是它的服务对象。（此注释修饰的方法的方法体为空，不需要写功能比如 public void say(){};
     就可以了，方法名可以被候命的具体服务功能所引用，它可以被理解为切点对象的一个代理对象方法）
    

     注解方式声明Aop
        1.用@Aspect注解将类声明为切面(如果用@Component("")注解注释为一个bean对象，那么就要在spring配置文件中开启注解扫描，<context:component-scan base-package="com.cjh.aop2"/>
        否则要在spring配置文件中声明一个bean对象)
　       定义切点@Pointcut("execution(* *.saying(..))")
                 parivate void sayings(){}  这个方法没有实际意义 方法名sayings()相当于id  真实的切入点在注解中的value给出
       2.在切面需要实现相应方法的前面加上相应的注释，也就是通知类型。 
       前置通知(注解中的sayings()方法，其实就是上面定义pointcut切点注解所修饰的方法名，那只是个代理对象,不需要写具体相当于xml声明切面的id名，如下，相当于id="embark",用于供其他通知类型引用)
     3.此处有环绕通知，环绕通知方法一定要有ProceedingJoinPoint类型的参数传入，然后执行对应的proceed()方法，环绕才能实现。
　     前置通知
      @Before("sayings()")    或者直接@Before(value="execution()") 而不使用pointcut注解
      后置通知
　    @AfterReturning(value="sayings()",retuening="result")  在注解中可以设置后置通知得到被增强方法返回值的参数
     在通知中设置参数 object result  名字要对应
     
     环绕通知 注意要有ProceedingJoinPoint参数传入。
      @Around("sayings()")
     
      @after最终通知
      
      @afterThrowing(value="execution()",throwing="e")  在通知中添加参数 Throwable e  可以获得被增强方法中的异常信息 名字要对应
     
     
  15Spring的JDBC模板
  Spring的ORM模块用于整合hibernate或者Spring Date JPA
  
  jdbc模板就是对jdbc的一个封装
  jar包-Spring基础jar包 aop开发包 数据库驱动( 使用注解需要Context aop 的schema规范 )、Spring的tx和 jdbc.jar包 c3p0的连接池jar包
  
  如何使用jdbc模板:(类似于DButils的用法)
  JdbcTemplate jdbcTemplate = new JdbcTemplate(datesource);
  
  这里可以使用c3p0连接池 也可以使用Spring自带的一个连接池类  DrivermangerDataSource 类创建连接池
  DrivermangerDataSource  dataSource=new  DrivermangerDataSource();
  然后可以使用 datesource.setDriverclassName设置 数据库驱动类型 
               datasource.seturl设置连接的数据库
               datasource.setusernanme()
               datasource.setpassword()
  janctemplate.update()  这里增删改类似于DButils 而查询不一样
  
  
  将jdbctemplete类和连接池类交给Spring管理 这样可以保证连接池只创建一次 单例创建
   <bean id="dataSource" class="org.springFramework.jdbc.datasource.DriverManagerDataSource"></bean>
   由于这个类不是我们的,所以不能使用用注解来变成beans 由于这个类有set方法,所以可以通过<property>标签进行属性注入
  同样的jbctemple也交给spring管理,然后使用属性注入,将连接池对象注入给jdbctemple

  记住 只要有set方法的类都可以交给Spring管理,然后使用属性注入,使用Spring来获得对象
   <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.msql.jdbc.Driver"></property>
     <property name="url" value="jdbc:mysql://localhost/spring"></property>
      <property name="userName" value="root"></property>
       <property name="password" value="root"></property>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="dataSource"></property>
  
  
     15.2不使用DriverManagerdatasource 使用开源的数据库连接池 c3p0和DBCP
         Ⅰ使用DBCP 引入连个jar包  1dbcp 2pool
             配置dbcp和sring自带的数据库连接池一致 导包 然后将连接池对象给Spring管理,dbcp连接池中的属性和spring自带的一模一样
             dbcp的连接池类 BasicDatasource类
             
          Ⅱ使用c3p0连接池  c3p0的核心类叫 combpooldatasource
            其他类似 c3p0中的属性名不太一样
            驱动属性名 -driverClass (driverClassName )
            地址   jdbcUrl  (url)
            用户名  user (username)
            密码  password
           
        15.2使用属性文件配置数据库的相关值  
           可以在spring核心xml里面引入属性文件
    
            通过context标签 
            <context:propertypalceholder location="xxxx"/>
            <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
           <property name="driverClassName" value="${变量名}"></property>
           <property name="url" value="${变量名}"></property>
           <property name="userName" value="${变量名}"></property>
           <property name="password" value="${变量名}"></property>
            </bean>
           
           由于我们引入了属性文件,所以value就不应该写死 通过value="${变量名}"这种方式获得Spring读取的相关值
           这样我们在更改数据库的时候只需要修改配置文件,而不需要去更改xml配置文件
           
           
           属性文件写法:
           变量名=value   比如   jdbc.driverClass=xxxx
                                 jdbc.url=xxxxx
                                 jdbc.username=xxxx
           15.3在测试类中我们没有将测试类添加为beans但是依然可以属性注入是因为@ContextConfiguration这个注解提供的底层
              整合好了允许我们这样做,不然的话使用注解属性注入需要使用<context:annotation-config>这个标签 并且那个类要
              被spring管理
              
            15.4 STS插件  下载安装了可以提示全路径名字  
           
            15.5Spring的jdbc模板的crud操作
              jdbctemplate 
              插入删除修改 都是updata方法
              jdbctemplate.update(sql,参数,参数)
              
              查询操作:
                查询一个值(单个值) 
                      jdbctemplate .queryForObject("sql",返回值类型的class类,参数)
               
                查询的是一行值或者多行值(返回的是对象或者list)
                    查询一行值 使用queryForobjec
                    T t= jdbctemplate.queryForobject(sql,rowMapper<T>接口,参数) 
                        和DButil类似 我们需要去实现这个接口 重写里面的方法,在方法里我们手动封装查询所得数据到一个对象里面
                        这里的泛型就是指定我们要返回的类型 给重写方法指定返回类型
                   
                   查询多行值使用query((sql,rowMapper<T>接口,参数)
                   query()这个函数返回的是一个list<T> query这个方法帮我们完成了list的创建 
                   和上面一样 我们仍然只需要重写rowMapper完成对一个对象的封装即可 
                   比如query()的源码就是创建list,然后对查询的结果集Result rs 循环调用我们重写的数据封装方法
                   
                   创建list
                   while(rs.next(),){
                      循环调用重写方法得到对象
                      将对象装到list里面
                   }
                    retuen  list<>
           
           
           
           16Spring的事务管理
            两种方式:
            编程式事务管理
            声明式事务管理-通过配置xml或者注解来完成事务
            
            核心API:
            PlatformTransactionManager:接口 是spring用于管理事务的真正对象
               两个实现类:1DateSourceteansactionManager:  底层使用jdbc管理事务
                          2Hibernatetransactionmanger: 底层使用hibernate管理事务
           
            TransactionDefinition类:定义事务信息  用于定义事务的相关信息 隔离级别 超时信息 传播行为
             isolation开头的静态方法用于设置隔离级别
             传播行为:事务的传播行为主要用来解决业务层方法相互调用的问题
               有可能一个业务可能调用其他多个业务
              &中事务的传播行为,分为三类
                Ⅰ保证多个操作在同一个事务 
                progation_required   :默认值 如当前上下文中有事务,就使用A中事务,如果A没有,创建一个事务,将所有操作包含进来,让操作在同一个事务
                progation_support       如果当前上下文中有事务,则使用A事务,如果没有,不使用事务
                progation_mandatory     如果当前上下文中有事务则使用A事务,如果没有则抛出异常
                Ⅱ保证多个操作不在同一个事务 
                progation_required_New   如果当前上下文中有事务则挂起,创建新事务包含自身操作,如果a中没有事务,则创建新事务包含自身操作
                progation_require_Not_support   如果当前上下文中有事务则挂起,,创建新事务包含自身操作,如果没有则不使用事务管理
                progation_never      如果当前上下文中有事务则抛出异常
                Ⅲ嵌套式的事务
                progation_nested
                 嵌套事务,如果当前上下文中有事务,按照当前上下文中的事务执行,执行完成后,设置一个保存点,执行B中的操作,如果没有异常,执行通过,如果有异常,可以选择回滚到起始
                 或者保存点
            
            
                我们要清楚的是不论是传播行为也好还是隔离级别都是针对自身而言的,比如事务A的隔离级别是读已提交,那么其他事务就不能读事务A为提交的数据
            
            TransactionStatus:事务的状态   
            
            这三个的关系:
            Spring经行事务管理的时候,首先平台事务管理器根据事务定义信息进行事务的管理,在事务管理过程中,产生各种
            状态,将这些状态的信息记录到事务状态的对象中
            
            
           17在编写Dao类的时候,由于每个dao都要注入jdbc模板 要申明jdbc模板私有变量和set方法,因此很麻烦
           Spring提供了一个JdbcDaoSupport类  里面包含一个jdbvtemplate 变量个set方法 因此只要让我们的
           Dao类去继承jdbcDaoSupport  那么就可以在xml中注入jdbc模板而不需要申明
           
           更简单的方法是结成了jdbcDaoSupport后,直接对Dao注入连接池而不是jdbc模板,因为在jdbcDaoSupport里面同样也有datasource这个类对象
           当我们注入datasorce后  看源码可以知道  setdatasorce()方法并不是用于自身属性的注入,而是会生成一个jdbc模板赋值给jdbctemplate 变量
           
           当完成这个操作后,我们可以在Dao中  使用this.getjdbctemplate()得到模板,因为无法直接调用父类的私有jdbctemplate变量,但是可以调用方法得到变量
           
           
            
           18Spring事务管理流程   编程式事务管理
           1配置平台事务管理器  这个接口两个实现类 一个底层使用jdbc    一个底层使用hibernate管理 
           <bean id="transactionmanager" class="DataSourcetransactionmanger的全路径">
           <property name="dataSource"></property>   需要给这个类注入一个连接池对象  有了连接才能开启关闭事务对吧!!!
           </bean >   底层使用jdbc的类
           
            <bean id="transactionmanager" class="hibernagetransactionmanger的全路径">  同理   底层使用hibernate管理 
           
           2第二步 Spring提供了事务管理的模板类
             <bean id=""  class="transactionTemplate全路径">  <property name="transactionManager" ref=""><>
           模板类是由于简化了事务的操作,所以给模板类注入事务管理器类  使用事务模板类来管理事务
           
           3第三步  在业务层注入事务管理模板,因为是在业务层添加事务
           调用方法
           transTemplate.execute(new transactionCallbanwithoutResult(transactionStatus transactionstatus){
              
              在里面的一个叫doIntransactionwithoutresult()的重写方法中写我们事务包含的逻辑即可
           
           })
           
           
           申明式管理事务(使用了AOP的思想)  所以需要AOP的关键jar包
           底层其实就是我们在需要事务的时候 将事务的开启和关闭用Around的方式 包括住我们的service方法
           XML方式:
           1配置事务管理器 同上
           2配置一个事务增强方法  由于事务的增强是固定的  所以Spring提供好了 只需要在xml里面配置即可
           <tx:advice transaction-manager="xxx" id="txxxx">
            <tx:attributes>   这里是定义事务管理的规则,看似很多实际是一个增强方法
                <tx:method name="save*"  propagation="REQUIRED" isolation="">      这里就是给哪个方法配置事务  传播行为
                <tx:method name="update*"   propagation="REQUIRED" isolation="">
                <tx:method name="find*"    propagation="REQUIRED" isolation="">
                <tx:method name="delete*  propagation="REQUIRED" isolation="">
                 <tx:method name="*" propagation="REQUIRED" isolation="">  对所有方法进行....  name指定开启事务的方法
            </tx:attributes>
           <t/x:advice>
           
           3配置到目标类  配置AOP ( 将tx通知配置到具体的类或方法中)
           <aop:config>
           <aop:pointcut expression="execution()">  注意  一个切入点可以使用*包含多个方法  这里指向我们要增强的service方法
           <aop:advisor advice-ref="增强的advice的id" pointcut-ref="">  这个标签用于一个增强和一个切入点对应的时候
           </aop:config>
             <aop:aspect>用于一个切面类包含很多通知的时候使用,多个通知对应多个切入点
           
           
           注解事务方式:
           1配置事务管理器
           <bean id="dataSourceManager" class="DataSourceTransactionManager">
             <property name="dataSource"  ref=""> </property>
           </bean>
           
           2开启注解事务  (和AOP注解要开启<AOP:aspectj:...autopRoxy>一样  属性注解annptation-config)
          <tx:annotation-driven transaction-manager="TransactionManger">
          这个标签需要一个事务管理器属性
          
           3添加标签@transactionl 
               
                需要注意的是 @transactionl 可以添加在类上也可以添加在方法上,添加在类上对里面所有方法生效 添加在方法上的会覆盖类上的
                但是我们要注意 如果仅仅添加在方法上,会导致同一个类中的方法相互调用无法触发事务
                
                原因: Spring采用动态代理(AOP)实现对bean的管理和切片，它为我们的每个class生成一个代理对象。只有在代理对象之间进行调用时，可以触发切面逻辑。
                而在同一个class中，方法B调用方法A，调用的是原对象的方法，而不通过代理对象。所以Spring无法切到这次调用，也就无法通过注解保证事务性了。
                也就是说，在同一个类中的方法调用，则不会被方法拦截器拦截到，因此事务不会起作用。

                解决方案:
                可以将方法放入另一个类，并且该类通过spring注入，即符合了在对象之间调用的条件。
                获取本对象的代理对象，再进行调用。具体操作如：
                1）Spring-content.xml上下文中，增加配置：<aop:aspectj-autoproxy expose-proxy=“true”/>
                2）在xxxServiceImpl中，用(xxxService)(AopContext.currentProxy())，获取到xxxService的代理类，再调用事务方法，强行经过代理类，激活事务切面

                注意  如果在类上+事务注解是绝对没问题的,只有单独在方法上加事务才会出现上述问题
                类上加事务，方法不加事务，事务是生效的！
                类上加事务，方法也加事务，事务是生效的

          
          
          
          
          
          
         
          
          
